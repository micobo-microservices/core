// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: provider/v1/idnow.proto

package providerv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IDnowSuccessPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowSuccessPayloadMultiError, or nil if none found.
func (m *IDnowSuccessPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIdentificationprocess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayloadValidationError{
					field:  "Identificationprocess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayloadValidationError{
					field:  "Identificationprocess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentificationprocess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayloadValidationError{
				field:  "Identificationprocess",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustomdata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayloadValidationError{
					field:  "Customdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayloadValidationError{
					field:  "Customdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomdata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayloadValidationError{
				field:  "Customdata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetContactdata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayloadValidationError{
					field:  "Contactdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayloadValidationError{
					field:  "Contactdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContactdata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayloadValidationError{
				field:  "Contactdata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserdata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayloadValidationError{
					field:  "Userdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayloadValidationError{
					field:  "Userdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserdata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayloadValidationError{
				field:  "Userdata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIdentificationdocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayloadValidationError{
					field:  "Identificationdocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayloadValidationError{
					field:  "Identificationdocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentificationdocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayloadValidationError{
				field:  "Identificationdocument",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAttachments()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayloadValidationError{
					field:  "Attachments",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayloadValidationError{
					field:  "Attachments",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttachments()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayloadValidationError{
				field:  "Attachments",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowSuccessPayloadMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayloadMultiError is an error wrapping multiple validation
// errors returned by IDnowSuccessPayload.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayloadMultiError) AllErrors() []error { return m }

// IDnowSuccessPayloadValidationError is the validation error returned by
// IDnowSuccessPayload.Validate if the designated constraints aren't met.
type IDnowSuccessPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayloadValidationError) ErrorName() string {
	return "IDnowSuccessPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayloadValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowReviewPendingPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingPayload with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingPayloadMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIdentificationprocess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayloadValidationError{
					field:  "Identificationprocess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayloadValidationError{
					field:  "Identificationprocess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentificationprocess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayloadValidationError{
				field:  "Identificationprocess",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustomdata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayloadValidationError{
					field:  "Customdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayloadValidationError{
					field:  "Customdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomdata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayloadValidationError{
				field:  "Customdata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetContactdata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayloadValidationError{
					field:  "Contactdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayloadValidationError{
					field:  "Contactdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContactdata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayloadValidationError{
				field:  "Contactdata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserdata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayloadValidationError{
					field:  "Userdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayloadValidationError{
					field:  "Userdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserdata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayloadValidationError{
				field:  "Userdata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIdentificationdocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayloadValidationError{
					field:  "Identificationdocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayloadValidationError{
					field:  "Identificationdocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentificationdocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayloadValidationError{
				field:  "Identificationdocument",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAttachments()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayloadValidationError{
					field:  "Attachments",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayloadValidationError{
					field:  "Attachments",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttachments()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayloadValidationError{
				field:  "Attachments",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowReviewPendingPayloadMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayloadMultiError is an error wrapping multiple validation
// errors returned by IDnowReviewPendingPayload.ValidateAll() if the
// designated constraints aren't met.
type IDnowReviewPendingPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayloadMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayloadValidationError is the validation error returned by
// IDnowReviewPendingPayload.Validate if the designated constraints aren't met.
type IDnowReviewPendingPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayloadValidationError) ErrorName() string {
	return "IDnowReviewPendingPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayloadValidationError{}

// Validate checks the field values on IDnowFraudSuspicionPendingPayload with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowFraudSuspicionPendingPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowFraudSuspicionPendingPayload
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowFraudSuspicionPendingPayloadMultiError, or nil if none found.
func (m *IDnowFraudSuspicionPendingPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionPendingPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIdentificationprocess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayloadValidationError{
					field:  "Identificationprocess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayloadValidationError{
					field:  "Identificationprocess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentificationprocess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionPendingPayloadValidationError{
				field:  "Identificationprocess",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustomdata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayloadValidationError{
					field:  "Customdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayloadValidationError{
					field:  "Customdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomdata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionPendingPayloadValidationError{
				field:  "Customdata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetContactdata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayloadValidationError{
					field:  "Contactdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayloadValidationError{
					field:  "Contactdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContactdata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionPendingPayloadValidationError{
				field:  "Contactdata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserdata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayloadValidationError{
					field:  "Userdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayloadValidationError{
					field:  "Userdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserdata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionPendingPayloadValidationError{
				field:  "Userdata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIdentificationdocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayloadValidationError{
					field:  "Identificationdocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayloadValidationError{
					field:  "Identificationdocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentificationdocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionPendingPayloadValidationError{
				field:  "Identificationdocument",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAttachments()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayloadValidationError{
					field:  "Attachments",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayloadValidationError{
					field:  "Attachments",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttachments()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionPendingPayloadValidationError{
				field:  "Attachments",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowFraudSuspicionPendingPayloadMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionPendingPayloadMultiError is an error wrapping multiple
// validation errors returned by
// IDnowFraudSuspicionPendingPayload.ValidateAll() if the designated
// constraints aren't met.
type IDnowFraudSuspicionPendingPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionPendingPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionPendingPayloadMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionPendingPayloadValidationError is the validation error
// returned by IDnowFraudSuspicionPendingPayload.Validate if the designated
// constraints aren't met.
type IDnowFraudSuspicionPendingPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionPendingPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionPendingPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionPendingPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionPendingPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionPendingPayloadValidationError) ErrorName() string {
	return "IDnowFraudSuspicionPendingPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionPendingPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionPendingPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionPendingPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionPendingPayloadValidationError{}

// Validate checks the field values on IDnowSuccessDataChangedPayload with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessDataChangedPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessDataChangedPayload with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowSuccessDataChangedPayloadMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIdentificationprocess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayloadValidationError{
					field:  "Identificationprocess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayloadValidationError{
					field:  "Identificationprocess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentificationprocess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayloadValidationError{
				field:  "Identificationprocess",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustomdata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayloadValidationError{
					field:  "Customdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayloadValidationError{
					field:  "Customdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomdata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayloadValidationError{
				field:  "Customdata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetContactdata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayloadValidationError{
					field:  "Contactdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayloadValidationError{
					field:  "Contactdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContactdata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayloadValidationError{
				field:  "Contactdata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserdata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayloadValidationError{
					field:  "Userdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayloadValidationError{
					field:  "Userdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserdata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayloadValidationError{
				field:  "Userdata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIdentificationdocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayloadValidationError{
					field:  "Identificationdocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayloadValidationError{
					field:  "Identificationdocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentificationdocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayloadValidationError{
				field:  "Identificationdocument",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAttachments()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayloadValidationError{
					field:  "Attachments",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayloadValidationError{
					field:  "Attachments",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttachments()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayloadValidationError{
				field:  "Attachments",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayloadMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayloadMultiError is an error wrapping multiple
// validation errors returned by IDnowSuccessDataChangedPayload.ValidateAll()
// if the designated constraints aren't met.
type IDnowSuccessDataChangedPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayloadMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayloadValidationError is the validation error
// returned by IDnowSuccessDataChangedPayload.Validate if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayloadValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayloadValidationError{}

// Validate checks the field values on IDnowFraudSuspicionConfirmedPayload with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowFraudSuspicionConfirmedPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowFraudSuspicionConfirmedPayload
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayloadMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIdentificationprocess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayloadValidationError{
					field:  "Identificationprocess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayloadValidationError{
					field:  "Identificationprocess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentificationprocess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayloadValidationError{
				field:  "Identificationprocess",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustomdata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayloadValidationError{
					field:  "Customdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayloadValidationError{
					field:  "Customdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomdata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayloadValidationError{
				field:  "Customdata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetContactdata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayloadValidationError{
					field:  "Contactdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayloadValidationError{
					field:  "Contactdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContactdata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayloadValidationError{
				field:  "Contactdata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserdata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayloadValidationError{
					field:  "Userdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayloadValidationError{
					field:  "Userdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserdata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayloadValidationError{
				field:  "Userdata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIdentificationdocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayloadValidationError{
					field:  "Identificationdocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayloadValidationError{
					field:  "Identificationdocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentificationdocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayloadValidationError{
				field:  "Identificationdocument",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAttachments()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayloadValidationError{
					field:  "Attachments",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayloadValidationError{
					field:  "Attachments",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttachments()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayloadValidationError{
				field:  "Attachments",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayloadMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayloadMultiError is an error wrapping multiple
// validation errors returned by
// IDnowFraudSuspicionConfirmedPayload.ValidateAll() if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayloadMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayloadValidationError is the validation error
// returned by IDnowFraudSuspicionConfirmedPayload.Validate if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayloadValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayloadValidationError{}

// Validate checks the field values on IDnowCanceledPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowCanceledPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayloadMultiError, or nil if none found.
func (m *IDnowCanceledPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIdentificationprocess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayloadValidationError{
					field:  "Identificationprocess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayloadValidationError{
					field:  "Identificationprocess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentificationprocess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayloadValidationError{
				field:  "Identificationprocess",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustomdata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayloadValidationError{
					field:  "Customdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayloadValidationError{
					field:  "Customdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomdata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayloadValidationError{
				field:  "Customdata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetContactdata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayloadValidationError{
					field:  "Contactdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayloadValidationError{
					field:  "Contactdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContactdata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayloadValidationError{
				field:  "Contactdata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserdata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayloadValidationError{
					field:  "Userdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayloadValidationError{
					field:  "Userdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserdata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayloadValidationError{
				field:  "Userdata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIdentificationdocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayloadValidationError{
					field:  "Identificationdocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayloadValidationError{
					field:  "Identificationdocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentificationdocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayloadValidationError{
				field:  "Identificationdocument",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAttachments()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayloadValidationError{
					field:  "Attachments",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayloadValidationError{
					field:  "Attachments",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttachments()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayloadValidationError{
				field:  "Attachments",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowCanceledPayloadMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayloadMultiError is an error wrapping multiple validation
// errors returned by IDnowCanceledPayload.ValidateAll() if the designated
// constraints aren't met.
type IDnowCanceledPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayloadMultiError) AllErrors() []error { return m }

// IDnowCanceledPayloadValidationError is the validation error returned by
// IDnowCanceledPayload.Validate if the designated constraints aren't met.
type IDnowCanceledPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayloadValidationError) ErrorName() string {
	return "IDnowCanceledPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayloadValidationError{}

// Validate checks the field values on IDnowAbortedPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowAbortedPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowAbortedPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowAbortedPayloadMultiError, or nil if none found.
func (m *IDnowAbortedPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowAbortedPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIdentificationprocess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayloadValidationError{
					field:  "Identificationprocess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayloadValidationError{
					field:  "Identificationprocess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentificationprocess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayloadValidationError{
				field:  "Identificationprocess",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustomdata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayloadValidationError{
					field:  "Customdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayloadValidationError{
					field:  "Customdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomdata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayloadValidationError{
				field:  "Customdata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetContactdata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayloadValidationError{
					field:  "Contactdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayloadValidationError{
					field:  "Contactdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContactdata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayloadValidationError{
				field:  "Contactdata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserdata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayloadValidationError{
					field:  "Userdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayloadValidationError{
					field:  "Userdata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserdata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayloadValidationError{
				field:  "Userdata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIdentificationdocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayloadValidationError{
					field:  "Identificationdocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayloadValidationError{
					field:  "Identificationdocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentificationdocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayloadValidationError{
				field:  "Identificationdocument",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAttachments()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayloadValidationError{
					field:  "Attachments",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayloadValidationError{
					field:  "Attachments",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttachments()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayloadValidationError{
				field:  "Attachments",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowAbortedPayloadMultiError(errors)
	}

	return nil
}

// IDnowAbortedPayloadMultiError is an error wrapping multiple validation
// errors returned by IDnowAbortedPayload.ValidateAll() if the designated
// constraints aren't met.
type IDnowAbortedPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowAbortedPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowAbortedPayloadMultiError) AllErrors() []error { return m }

// IDnowAbortedPayloadValidationError is the validation error returned by
// IDnowAbortedPayload.Validate if the designated constraints aren't met.
type IDnowAbortedPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowAbortedPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowAbortedPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowAbortedPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowAbortedPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowAbortedPayloadValidationError) ErrorName() string {
	return "IDnowAbortedPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowAbortedPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowAbortedPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowAbortedPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowAbortedPayloadValidationError{}

// Validate checks the field values on
// IDnowSuccessPayload_Identificationprocess with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload_Identificationprocess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowSuccessPayload_Identificationprocess with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowSuccessPayload_IdentificationprocessMultiError, or nil if none found.
func (m *IDnowSuccessPayload_Identificationprocess) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload_Identificationprocess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Companyid

	// no validation rules for Filename

	if all {
		switch v := interface{}(m.GetIdentificationtime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_IdentificationprocessValidationError{
					field:  "Identificationtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_IdentificationprocessValidationError{
					field:  "Identificationtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentificationtime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_IdentificationprocessValidationError{
				field:  "Identificationtime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	// no validation rules for Href

	// no validation rules for Type

	// no validation rules for Transactionnumber

	if len(errors) > 0 {
		return IDnowSuccessPayload_IdentificationprocessMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayload_IdentificationprocessMultiError is an error wrapping
// multiple validation errors returned by
// IDnowSuccessPayload_Identificationprocess.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessPayload_IdentificationprocessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayload_IdentificationprocessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayload_IdentificationprocessMultiError) AllErrors() []error { return m }

// IDnowSuccessPayload_IdentificationprocessValidationError is the validation
// error returned by IDnowSuccessPayload_Identificationprocess.Validate if the
// designated constraints aren't met.
type IDnowSuccessPayload_IdentificationprocessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayload_IdentificationprocessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayload_IdentificationprocessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayload_IdentificationprocessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayload_IdentificationprocessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayload_IdentificationprocessValidationError) ErrorName() string {
	return "IDnowSuccessPayload_IdentificationprocessValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayload_IdentificationprocessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload_Identificationprocess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayload_IdentificationprocessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayload_IdentificationprocessValidationError{}

// Validate checks the field values on IDnowSuccessPayload_Customdata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload_Customdata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessPayload_Customdata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowSuccessPayload_CustomdataMultiError, or nil if none found.
func (m *IDnowSuccessPayload_Customdata) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload_Customdata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCustom3()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_CustomdataValidationError{
					field:  "Custom3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_CustomdataValidationError{
					field:  "Custom3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom3()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_CustomdataValidationError{
				field:  "Custom3",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom4()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_CustomdataValidationError{
					field:  "Custom4",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_CustomdataValidationError{
					field:  "Custom4",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom4()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_CustomdataValidationError{
				field:  "Custom4",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_CustomdataValidationError{
					field:  "Custom1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_CustomdataValidationError{
					field:  "Custom1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_CustomdataValidationError{
				field:  "Custom1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_CustomdataValidationError{
					field:  "Custom2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_CustomdataValidationError{
					field:  "Custom2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_CustomdataValidationError{
				field:  "Custom2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom5()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_CustomdataValidationError{
					field:  "Custom5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_CustomdataValidationError{
					field:  "Custom5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom5()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_CustomdataValidationError{
				field:  "Custom5",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowSuccessPayload_CustomdataMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayload_CustomdataMultiError is an error wrapping multiple
// validation errors returned by IDnowSuccessPayload_Customdata.ValidateAll()
// if the designated constraints aren't met.
type IDnowSuccessPayload_CustomdataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayload_CustomdataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayload_CustomdataMultiError) AllErrors() []error { return m }

// IDnowSuccessPayload_CustomdataValidationError is the validation error
// returned by IDnowSuccessPayload_Customdata.Validate if the designated
// constraints aren't met.
type IDnowSuccessPayload_CustomdataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayload_CustomdataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayload_CustomdataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayload_CustomdataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayload_CustomdataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayload_CustomdataValidationError) ErrorName() string {
	return "IDnowSuccessPayload_CustomdataValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayload_CustomdataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload_Customdata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayload_CustomdataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayload_CustomdataValidationError{}

// Validate checks the field values on IDnowSuccessPayload_Contactdata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload_Contactdata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessPayload_Contactdata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowSuccessPayload_ContactdataMultiError, or nil if none found.
func (m *IDnowSuccessPayload_Contactdata) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload_Contactdata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMobilephone()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_ContactdataValidationError{
					field:  "Mobilephone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_ContactdataValidationError{
					field:  "Mobilephone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMobilephone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_ContactdataValidationError{
				field:  "Mobilephone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEmail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_ContactdataValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_ContactdataValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_ContactdataValidationError{
				field:  "Email",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowSuccessPayload_ContactdataMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayload_ContactdataMultiError is an error wrapping multiple
// validation errors returned by IDnowSuccessPayload_Contactdata.ValidateAll()
// if the designated constraints aren't met.
type IDnowSuccessPayload_ContactdataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayload_ContactdataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayload_ContactdataMultiError) AllErrors() []error { return m }

// IDnowSuccessPayload_ContactdataValidationError is the validation error
// returned by IDnowSuccessPayload_Contactdata.Validate if the designated
// constraints aren't met.
type IDnowSuccessPayload_ContactdataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayload_ContactdataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayload_ContactdataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayload_ContactdataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayload_ContactdataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayload_ContactdataValidationError) ErrorName() string {
	return "IDnowSuccessPayload_ContactdataValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayload_ContactdataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload_Contactdata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayload_ContactdataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayload_ContactdataValidationError{}

// Validate checks the field values on IDnowSuccessPayload_Birthday with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload_Birthday) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessPayload_Birthday with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowSuccessPayload_BirthdayMultiError, or nil if none found.
func (m *IDnowSuccessPayload_Birthday) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload_Birthday) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessPayload_BirthdayMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayload_BirthdayMultiError is an error wrapping multiple
// validation errors returned by IDnowSuccessPayload_Birthday.ValidateAll() if
// the designated constraints aren't met.
type IDnowSuccessPayload_BirthdayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayload_BirthdayMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayload_BirthdayMultiError) AllErrors() []error { return m }

// IDnowSuccessPayload_BirthdayValidationError is the validation error returned
// by IDnowSuccessPayload_Birthday.Validate if the designated constraints
// aren't met.
type IDnowSuccessPayload_BirthdayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayload_BirthdayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayload_BirthdayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayload_BirthdayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayload_BirthdayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayload_BirthdayValidationError) ErrorName() string {
	return "IDnowSuccessPayload_BirthdayValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayload_BirthdayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload_Birthday.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayload_BirthdayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayload_BirthdayValidationError{}

// Validate checks the field values on IDnowSuccessPayload_Firstname with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload_Firstname) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessPayload_Firstname with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowSuccessPayload_FirstnameMultiError, or nil if none found.
func (m *IDnowSuccessPayload_Firstname) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload_Firstname) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessPayload_FirstnameMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayload_FirstnameMultiError is an error wrapping multiple
// validation errors returned by IDnowSuccessPayload_Firstname.ValidateAll()
// if the designated constraints aren't met.
type IDnowSuccessPayload_FirstnameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayload_FirstnameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayload_FirstnameMultiError) AllErrors() []error { return m }

// IDnowSuccessPayload_FirstnameValidationError is the validation error
// returned by IDnowSuccessPayload_Firstname.Validate if the designated
// constraints aren't met.
type IDnowSuccessPayload_FirstnameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayload_FirstnameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayload_FirstnameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayload_FirstnameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayload_FirstnameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayload_FirstnameValidationError) ErrorName() string {
	return "IDnowSuccessPayload_FirstnameValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayload_FirstnameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload_Firstname.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayload_FirstnameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayload_FirstnameValidationError{}

// Validate checks the field values on IDnowSuccessPayload_Address with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload_Address) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessPayload_Address with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowSuccessPayload_AddressMultiError, or nil if none found.
func (m *IDnowSuccessPayload_Address) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload_Address) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IDnowSuccessPayload_AddressMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayload_AddressMultiError is an error wrapping multiple
// validation errors returned by IDnowSuccessPayload_Address.ValidateAll() if
// the designated constraints aren't met.
type IDnowSuccessPayload_AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayload_AddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayload_AddressMultiError) AllErrors() []error { return m }

// IDnowSuccessPayload_AddressValidationError is the validation error returned
// by IDnowSuccessPayload_Address.Validate if the designated constraints
// aren't met.
type IDnowSuccessPayload_AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayload_AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayload_AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayload_AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayload_AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayload_AddressValidationError) ErrorName() string {
	return "IDnowSuccessPayload_AddressValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayload_AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload_Address.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayload_AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayload_AddressValidationError{}

// Validate checks the field values on IDnowSuccessPayload_Birthplace with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload_Birthplace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessPayload_Birthplace with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowSuccessPayload_BirthplaceMultiError, or nil if none found.
func (m *IDnowSuccessPayload_Birthplace) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload_Birthplace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessPayload_BirthplaceMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayload_BirthplaceMultiError is an error wrapping multiple
// validation errors returned by IDnowSuccessPayload_Birthplace.ValidateAll()
// if the designated constraints aren't met.
type IDnowSuccessPayload_BirthplaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayload_BirthplaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayload_BirthplaceMultiError) AllErrors() []error { return m }

// IDnowSuccessPayload_BirthplaceValidationError is the validation error
// returned by IDnowSuccessPayload_Birthplace.Validate if the designated
// constraints aren't met.
type IDnowSuccessPayload_BirthplaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayload_BirthplaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayload_BirthplaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayload_BirthplaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayload_BirthplaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayload_BirthplaceValidationError) ErrorName() string {
	return "IDnowSuccessPayload_BirthplaceValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayload_BirthplaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload_Birthplace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayload_BirthplaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayload_BirthplaceValidationError{}

// Validate checks the field values on IDnowSuccessPayload_Nationality with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload_Nationality) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessPayload_Nationality with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowSuccessPayload_NationalityMultiError, or nil if none found.
func (m *IDnowSuccessPayload_Nationality) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload_Nationality) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessPayload_NationalityMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayload_NationalityMultiError is an error wrapping multiple
// validation errors returned by IDnowSuccessPayload_Nationality.ValidateAll()
// if the designated constraints aren't met.
type IDnowSuccessPayload_NationalityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayload_NationalityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayload_NationalityMultiError) AllErrors() []error { return m }

// IDnowSuccessPayload_NationalityValidationError is the validation error
// returned by IDnowSuccessPayload_Nationality.Validate if the designated
// constraints aren't met.
type IDnowSuccessPayload_NationalityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayload_NationalityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayload_NationalityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayload_NationalityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayload_NationalityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayload_NationalityValidationError) ErrorName() string {
	return "IDnowSuccessPayload_NationalityValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayload_NationalityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload_Nationality.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayload_NationalityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayload_NationalityValidationError{}

// Validate checks the field values on IDnowSuccessPayload_Gender with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload_Gender) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessPayload_Gender with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowSuccessPayload_GenderMultiError, or nil if none found.
func (m *IDnowSuccessPayload_Gender) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload_Gender) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessPayload_GenderMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayload_GenderMultiError is an error wrapping multiple
// validation errors returned by IDnowSuccessPayload_Gender.ValidateAll() if
// the designated constraints aren't met.
type IDnowSuccessPayload_GenderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayload_GenderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayload_GenderMultiError) AllErrors() []error { return m }

// IDnowSuccessPayload_GenderValidationError is the validation error returned
// by IDnowSuccessPayload_Gender.Validate if the designated constraints aren't met.
type IDnowSuccessPayload_GenderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayload_GenderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayload_GenderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayload_GenderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayload_GenderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayload_GenderValidationError) ErrorName() string {
	return "IDnowSuccessPayload_GenderValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayload_GenderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload_Gender.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayload_GenderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayload_GenderValidationError{}

// Validate checks the field values on IDnowSuccessPayload_Identlanguage with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowSuccessPayload_Identlanguage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessPayload_Identlanguage
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowSuccessPayload_IdentlanguageMultiError, or nil if none found.
func (m *IDnowSuccessPayload_Identlanguage) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload_Identlanguage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessPayload_IdentlanguageMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayload_IdentlanguageMultiError is an error wrapping multiple
// validation errors returned by
// IDnowSuccessPayload_Identlanguage.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessPayload_IdentlanguageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayload_IdentlanguageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayload_IdentlanguageMultiError) AllErrors() []error { return m }

// IDnowSuccessPayload_IdentlanguageValidationError is the validation error
// returned by IDnowSuccessPayload_Identlanguage.Validate if the designated
// constraints aren't met.
type IDnowSuccessPayload_IdentlanguageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayload_IdentlanguageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayload_IdentlanguageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayload_IdentlanguageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayload_IdentlanguageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayload_IdentlanguageValidationError) ErrorName() string {
	return "IDnowSuccessPayload_IdentlanguageValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayload_IdentlanguageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload_Identlanguage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayload_IdentlanguageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayload_IdentlanguageValidationError{}

// Validate checks the field values on IDnowSuccessPayload_Birthname with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload_Birthname) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessPayload_Birthname with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowSuccessPayload_BirthnameMultiError, or nil if none found.
func (m *IDnowSuccessPayload_Birthname) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload_Birthname) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessPayload_BirthnameMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayload_BirthnameMultiError is an error wrapping multiple
// validation errors returned by IDnowSuccessPayload_Birthname.ValidateAll()
// if the designated constraints aren't met.
type IDnowSuccessPayload_BirthnameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayload_BirthnameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayload_BirthnameMultiError) AllErrors() []error { return m }

// IDnowSuccessPayload_BirthnameValidationError is the validation error
// returned by IDnowSuccessPayload_Birthname.Validate if the designated
// constraints aren't met.
type IDnowSuccessPayload_BirthnameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayload_BirthnameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayload_BirthnameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayload_BirthnameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayload_BirthnameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayload_BirthnameValidationError) ErrorName() string {
	return "IDnowSuccessPayload_BirthnameValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayload_BirthnameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload_Birthname.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayload_BirthnameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayload_BirthnameValidationError{}

// Validate checks the field values on IDnowSuccessPayload_Lastname with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload_Lastname) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessPayload_Lastname with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowSuccessPayload_LastnameMultiError, or nil if none found.
func (m *IDnowSuccessPayload_Lastname) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload_Lastname) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessPayload_LastnameMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayload_LastnameMultiError is an error wrapping multiple
// validation errors returned by IDnowSuccessPayload_Lastname.ValidateAll() if
// the designated constraints aren't met.
type IDnowSuccessPayload_LastnameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayload_LastnameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayload_LastnameMultiError) AllErrors() []error { return m }

// IDnowSuccessPayload_LastnameValidationError is the validation error returned
// by IDnowSuccessPayload_Lastname.Validate if the designated constraints
// aren't met.
type IDnowSuccessPayload_LastnameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayload_LastnameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayload_LastnameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayload_LastnameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayload_LastnameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayload_LastnameValidationError) ErrorName() string {
	return "IDnowSuccessPayload_LastnameValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayload_LastnameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload_Lastname.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayload_LastnameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayload_LastnameValidationError{}

// Validate checks the field values on IDnowSuccessPayload_Userdata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload_Userdata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessPayload_Userdata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowSuccessPayload_UserdataMultiError, or nil if none found.
func (m *IDnowSuccessPayload_Userdata) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload_Userdata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBirthday()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_UserdataValidationError{
					field:  "Birthday",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_UserdataValidationError{
					field:  "Birthday",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBirthday()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_UserdataValidationError{
				field:  "Birthday",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFirstname()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_UserdataValidationError{
					field:  "Firstname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_UserdataValidationError{
					field:  "Firstname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFirstname()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_UserdataValidationError{
				field:  "Firstname",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_UserdataValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_UserdataValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_UserdataValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBirthplace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_UserdataValidationError{
					field:  "Birthplace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_UserdataValidationError{
					field:  "Birthplace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBirthplace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_UserdataValidationError{
				field:  "Birthplace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNationality()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_UserdataValidationError{
					field:  "Nationality",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_UserdataValidationError{
					field:  "Nationality",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNationality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_UserdataValidationError{
				field:  "Nationality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGender()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_UserdataValidationError{
					field:  "Gender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_UserdataValidationError{
					field:  "Gender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGender()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_UserdataValidationError{
				field:  "Gender",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIdentlanguage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_UserdataValidationError{
					field:  "Identlanguage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_UserdataValidationError{
					field:  "Identlanguage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentlanguage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_UserdataValidationError{
				field:  "Identlanguage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBirthname()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_UserdataValidationError{
					field:  "Birthname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_UserdataValidationError{
					field:  "Birthname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBirthname()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_UserdataValidationError{
				field:  "Birthname",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastname()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_UserdataValidationError{
					field:  "Lastname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_UserdataValidationError{
					field:  "Lastname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastname()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_UserdataValidationError{
				field:  "Lastname",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowSuccessPayload_UserdataMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayload_UserdataMultiError is an error wrapping multiple
// validation errors returned by IDnowSuccessPayload_Userdata.ValidateAll() if
// the designated constraints aren't met.
type IDnowSuccessPayload_UserdataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayload_UserdataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayload_UserdataMultiError) AllErrors() []error { return m }

// IDnowSuccessPayload_UserdataValidationError is the validation error returned
// by IDnowSuccessPayload_Userdata.Validate if the designated constraints
// aren't met.
type IDnowSuccessPayload_UserdataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayload_UserdataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayload_UserdataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayload_UserdataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayload_UserdataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayload_UserdataValidationError) ErrorName() string {
	return "IDnowSuccessPayload_UserdataValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayload_UserdataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload_Userdata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayload_UserdataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayload_UserdataValidationError{}

// Validate checks the field values on IDnowSuccessPayload_Country with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload_Country) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessPayload_Country with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowSuccessPayload_CountryMultiError, or nil if none found.
func (m *IDnowSuccessPayload_Country) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload_Country) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessPayload_CountryMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayload_CountryMultiError is an error wrapping multiple
// validation errors returned by IDnowSuccessPayload_Country.ValidateAll() if
// the designated constraints aren't met.
type IDnowSuccessPayload_CountryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayload_CountryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayload_CountryMultiError) AllErrors() []error { return m }

// IDnowSuccessPayload_CountryValidationError is the validation error returned
// by IDnowSuccessPayload_Country.Validate if the designated constraints
// aren't met.
type IDnowSuccessPayload_CountryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayload_CountryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayload_CountryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayload_CountryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayload_CountryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayload_CountryValidationError) ErrorName() string {
	return "IDnowSuccessPayload_CountryValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayload_CountryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload_Country.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayload_CountryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayload_CountryValidationError{}

// Validate checks the field values on IDnowSuccessPayload_Number with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload_Number) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessPayload_Number with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowSuccessPayload_NumberMultiError, or nil if none found.
func (m *IDnowSuccessPayload_Number) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload_Number) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessPayload_NumberMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayload_NumberMultiError is an error wrapping multiple
// validation errors returned by IDnowSuccessPayload_Number.ValidateAll() if
// the designated constraints aren't met.
type IDnowSuccessPayload_NumberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayload_NumberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayload_NumberMultiError) AllErrors() []error { return m }

// IDnowSuccessPayload_NumberValidationError is the validation error returned
// by IDnowSuccessPayload_Number.Validate if the designated constraints aren't met.
type IDnowSuccessPayload_NumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayload_NumberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayload_NumberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayload_NumberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayload_NumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayload_NumberValidationError) ErrorName() string {
	return "IDnowSuccessPayload_NumberValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayload_NumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload_Number.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayload_NumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayload_NumberValidationError{}

// Validate checks the field values on IDnowSuccessPayload_Issuedby with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload_Issuedby) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessPayload_Issuedby with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowSuccessPayload_IssuedbyMultiError, or nil if none found.
func (m *IDnowSuccessPayload_Issuedby) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload_Issuedby) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessPayload_IssuedbyMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayload_IssuedbyMultiError is an error wrapping multiple
// validation errors returned by IDnowSuccessPayload_Issuedby.ValidateAll() if
// the designated constraints aren't met.
type IDnowSuccessPayload_IssuedbyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayload_IssuedbyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayload_IssuedbyMultiError) AllErrors() []error { return m }

// IDnowSuccessPayload_IssuedbyValidationError is the validation error returned
// by IDnowSuccessPayload_Issuedby.Validate if the designated constraints
// aren't met.
type IDnowSuccessPayload_IssuedbyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayload_IssuedbyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayload_IssuedbyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayload_IssuedbyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayload_IssuedbyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayload_IssuedbyValidationError) ErrorName() string {
	return "IDnowSuccessPayload_IssuedbyValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayload_IssuedbyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload_Issuedby.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayload_IssuedbyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayload_IssuedbyValidationError{}

// Validate checks the field values on IDnowSuccessPayload_Dateissued with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload_Dateissued) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessPayload_Dateissued with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowSuccessPayload_DateissuedMultiError, or nil if none found.
func (m *IDnowSuccessPayload_Dateissued) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload_Dateissued) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessPayload_DateissuedMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayload_DateissuedMultiError is an error wrapping multiple
// validation errors returned by IDnowSuccessPayload_Dateissued.ValidateAll()
// if the designated constraints aren't met.
type IDnowSuccessPayload_DateissuedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayload_DateissuedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayload_DateissuedMultiError) AllErrors() []error { return m }

// IDnowSuccessPayload_DateissuedValidationError is the validation error
// returned by IDnowSuccessPayload_Dateissued.Validate if the designated
// constraints aren't met.
type IDnowSuccessPayload_DateissuedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayload_DateissuedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayload_DateissuedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayload_DateissuedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayload_DateissuedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayload_DateissuedValidationError) ErrorName() string {
	return "IDnowSuccessPayload_DateissuedValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayload_DateissuedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload_Dateissued.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayload_DateissuedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayload_DateissuedValidationError{}

// Validate checks the field values on IDnowSuccessPayload_Type with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload_Type) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessPayload_Type with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowSuccessPayload_TypeMultiError, or nil if none found.
func (m *IDnowSuccessPayload_Type) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload_Type) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessPayload_TypeMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayload_TypeMultiError is an error wrapping multiple validation
// errors returned by IDnowSuccessPayload_Type.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessPayload_TypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayload_TypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayload_TypeMultiError) AllErrors() []error { return m }

// IDnowSuccessPayload_TypeValidationError is the validation error returned by
// IDnowSuccessPayload_Type.Validate if the designated constraints aren't met.
type IDnowSuccessPayload_TypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayload_TypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayload_TypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayload_TypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayload_TypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayload_TypeValidationError) ErrorName() string {
	return "IDnowSuccessPayload_TypeValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayload_TypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload_Type.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayload_TypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayload_TypeValidationError{}

// Validate checks the field values on IDnowSuccessPayload_Validuntil with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload_Validuntil) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessPayload_Validuntil with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowSuccessPayload_ValiduntilMultiError, or nil if none found.
func (m *IDnowSuccessPayload_Validuntil) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload_Validuntil) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessPayload_ValiduntilMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayload_ValiduntilMultiError is an error wrapping multiple
// validation errors returned by IDnowSuccessPayload_Validuntil.ValidateAll()
// if the designated constraints aren't met.
type IDnowSuccessPayload_ValiduntilMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayload_ValiduntilMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayload_ValiduntilMultiError) AllErrors() []error { return m }

// IDnowSuccessPayload_ValiduntilValidationError is the validation error
// returned by IDnowSuccessPayload_Validuntil.Validate if the designated
// constraints aren't met.
type IDnowSuccessPayload_ValiduntilValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayload_ValiduntilValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayload_ValiduntilValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayload_ValiduntilValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayload_ValiduntilValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayload_ValiduntilValidationError) ErrorName() string {
	return "IDnowSuccessPayload_ValiduntilValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayload_ValiduntilValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload_Validuntil.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayload_ValiduntilValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayload_ValiduntilValidationError{}

// Validate checks the field values on
// IDnowSuccessPayload_Identificationdocument with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload_Identificationdocument) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowSuccessPayload_Identificationdocument with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowSuccessPayload_IdentificationdocumentMultiError, or nil if none found.
func (m *IDnowSuccessPayload_Identificationdocument) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload_Identificationdocument) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCountry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_IdentificationdocumentValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_IdentificationdocumentValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCountry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_IdentificationdocumentValidationError{
				field:  "Country",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNumber()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_IdentificationdocumentValidationError{
					field:  "Number",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_IdentificationdocumentValidationError{
					field:  "Number",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_IdentificationdocumentValidationError{
				field:  "Number",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIssuedby()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_IdentificationdocumentValidationError{
					field:  "Issuedby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_IdentificationdocumentValidationError{
					field:  "Issuedby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssuedby()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_IdentificationdocumentValidationError{
				field:  "Issuedby",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDateissued()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_IdentificationdocumentValidationError{
					field:  "Dateissued",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_IdentificationdocumentValidationError{
					field:  "Dateissued",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateissued()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_IdentificationdocumentValidationError{
				field:  "Dateissued",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_IdentificationdocumentValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_IdentificationdocumentValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_IdentificationdocumentValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValiduntil()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayload_IdentificationdocumentValidationError{
					field:  "Validuntil",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayload_IdentificationdocumentValidationError{
					field:  "Validuntil",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValiduntil()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayload_IdentificationdocumentValidationError{
				field:  "Validuntil",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDriverlicenses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IDnowSuccessPayload_IdentificationdocumentValidationError{
						field:  fmt.Sprintf("Driverlicenses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IDnowSuccessPayload_IdentificationdocumentValidationError{
						field:  fmt.Sprintf("Driverlicenses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IDnowSuccessPayload_IdentificationdocumentValidationError{
					field:  fmt.Sprintf("Driverlicenses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IDnowSuccessPayload_IdentificationdocumentMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayload_IdentificationdocumentMultiError is an error wrapping
// multiple validation errors returned by
// IDnowSuccessPayload_Identificationdocument.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessPayload_IdentificationdocumentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayload_IdentificationdocumentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayload_IdentificationdocumentMultiError) AllErrors() []error { return m }

// IDnowSuccessPayload_IdentificationdocumentValidationError is the validation
// error returned by IDnowSuccessPayload_Identificationdocument.Validate if
// the designated constraints aren't met.
type IDnowSuccessPayload_IdentificationdocumentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayload_IdentificationdocumentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayload_IdentificationdocumentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayload_IdentificationdocumentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayload_IdentificationdocumentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayload_IdentificationdocumentValidationError) ErrorName() string {
	return "IDnowSuccessPayload_IdentificationdocumentValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayload_IdentificationdocumentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload_Identificationdocument.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayload_IdentificationdocumentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayload_IdentificationdocumentValidationError{}

// Validate checks the field values on IDnowSuccessPayload_Attachments with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload_Attachments) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessPayload_Attachments with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowSuccessPayload_AttachmentsMultiError, or nil if none found.
func (m *IDnowSuccessPayload_Attachments) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload_Attachments) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pdf

	// no validation rules for Xml

	// no validation rules for Idfrontside

	if len(errors) > 0 {
		return IDnowSuccessPayload_AttachmentsMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayload_AttachmentsMultiError is an error wrapping multiple
// validation errors returned by IDnowSuccessPayload_Attachments.ValidateAll()
// if the designated constraints aren't met.
type IDnowSuccessPayload_AttachmentsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayload_AttachmentsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayload_AttachmentsMultiError) AllErrors() []error { return m }

// IDnowSuccessPayload_AttachmentsValidationError is the validation error
// returned by IDnowSuccessPayload_Attachments.Validate if the designated
// constraints aren't met.
type IDnowSuccessPayload_AttachmentsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayload_AttachmentsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayload_AttachmentsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayload_AttachmentsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayload_AttachmentsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayload_AttachmentsValidationError) ErrorName() string {
	return "IDnowSuccessPayload_AttachmentsValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayload_AttachmentsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload_Attachments.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayload_AttachmentsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayload_AttachmentsValidationError{}

// Validate checks the field values on
// IDnowReviewPendingPayload_Identificationprocess with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowReviewPendingPayload_Identificationprocess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowReviewPendingPayload_Identificationprocess with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// IDnowReviewPendingPayload_IdentificationprocessMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Identificationprocess) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Identificationprocess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Companyid

	// no validation rules for Filename

	if all {
		switch v := interface{}(m.GetIdentificationtime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_IdentificationprocessValidationError{
					field:  "Identificationtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_IdentificationprocessValidationError{
					field:  "Identificationtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentificationtime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_IdentificationprocessValidationError{
				field:  "Identificationtime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	// no validation rules for Href

	// no validation rules for Type

	// no validation rules for Transactionnumber

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_IdentificationprocessMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_IdentificationprocessMultiError is an error
// wrapping multiple validation errors returned by
// IDnowReviewPendingPayload_Identificationprocess.ValidateAll() if the
// designated constraints aren't met.
type IDnowReviewPendingPayload_IdentificationprocessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_IdentificationprocessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_IdentificationprocessMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_IdentificationprocessValidationError is the
// validation error returned by
// IDnowReviewPendingPayload_Identificationprocess.Validate if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_IdentificationprocessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_IdentificationprocessValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_IdentificationprocessValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_IdentificationprocessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_IdentificationprocessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_IdentificationprocessValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_IdentificationprocessValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_IdentificationprocessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Identificationprocess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_IdentificationprocessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_IdentificationprocessValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload_Customdata
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowReviewPendingPayload_Customdata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingPayload_Customdata
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingPayload_CustomdataMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Customdata) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Customdata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCustom3()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_CustomdataValidationError{
					field:  "Custom3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_CustomdataValidationError{
					field:  "Custom3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom3()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_CustomdataValidationError{
				field:  "Custom3",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom4()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_CustomdataValidationError{
					field:  "Custom4",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_CustomdataValidationError{
					field:  "Custom4",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom4()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_CustomdataValidationError{
				field:  "Custom4",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_CustomdataValidationError{
					field:  "Custom1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_CustomdataValidationError{
					field:  "Custom1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_CustomdataValidationError{
				field:  "Custom1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_CustomdataValidationError{
					field:  "Custom2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_CustomdataValidationError{
					field:  "Custom2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_CustomdataValidationError{
				field:  "Custom2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom5()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_CustomdataValidationError{
					field:  "Custom5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_CustomdataValidationError{
					field:  "Custom5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom5()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_CustomdataValidationError{
				field:  "Custom5",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_CustomdataMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_CustomdataMultiError is an error wrapping multiple
// validation errors returned by
// IDnowReviewPendingPayload_Customdata.ValidateAll() if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_CustomdataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_CustomdataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_CustomdataMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_CustomdataValidationError is the validation error
// returned by IDnowReviewPendingPayload_Customdata.Validate if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_CustomdataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_CustomdataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_CustomdataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_CustomdataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_CustomdataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_CustomdataValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_CustomdataValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_CustomdataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Customdata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_CustomdataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_CustomdataValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload_Contactdata
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowReviewPendingPayload_Contactdata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingPayload_Contactdata
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingPayload_ContactdataMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Contactdata) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Contactdata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mobilephone

	// no validation rules for Email

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_ContactdataMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_ContactdataMultiError is an error wrapping
// multiple validation errors returned by
// IDnowReviewPendingPayload_Contactdata.ValidateAll() if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_ContactdataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_ContactdataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_ContactdataMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_ContactdataValidationError is the validation error
// returned by IDnowReviewPendingPayload_Contactdata.Validate if the
// designated constraints aren't met.
type IDnowReviewPendingPayload_ContactdataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_ContactdataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_ContactdataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_ContactdataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_ContactdataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_ContactdataValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_ContactdataValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_ContactdataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Contactdata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_ContactdataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_ContactdataValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload_Birthday with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowReviewPendingPayload_Birthday) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingPayload_Birthday
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingPayload_BirthdayMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Birthday) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Birthday) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	// no validation rules for Original

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_BirthdayMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_BirthdayMultiError is an error wrapping multiple
// validation errors returned by
// IDnowReviewPendingPayload_Birthday.ValidateAll() if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_BirthdayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_BirthdayMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_BirthdayMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_BirthdayValidationError is the validation error
// returned by IDnowReviewPendingPayload_Birthday.Validate if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_BirthdayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_BirthdayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_BirthdayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_BirthdayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_BirthdayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_BirthdayValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_BirthdayValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_BirthdayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Birthday.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_BirthdayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_BirthdayValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload_Firstname with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowReviewPendingPayload_Firstname) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingPayload_Firstname
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingPayload_FirstnameMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Firstname) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Firstname) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_FirstnameMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_FirstnameMultiError is an error wrapping multiple
// validation errors returned by
// IDnowReviewPendingPayload_Firstname.ValidateAll() if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_FirstnameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_FirstnameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_FirstnameMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_FirstnameValidationError is the validation error
// returned by IDnowReviewPendingPayload_Firstname.Validate if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_FirstnameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_FirstnameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_FirstnameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_FirstnameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_FirstnameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_FirstnameValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_FirstnameValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_FirstnameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Firstname.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_FirstnameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_FirstnameValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload_Zipcode with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowReviewPendingPayload_Zipcode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingPayload_Zipcode
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingPayload_ZipcodeMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Zipcode) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Zipcode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	// no validation rules for Original

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_ZipcodeMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_ZipcodeMultiError is an error wrapping multiple
// validation errors returned by
// IDnowReviewPendingPayload_Zipcode.ValidateAll() if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_ZipcodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_ZipcodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_ZipcodeMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_ZipcodeValidationError is the validation error
// returned by IDnowReviewPendingPayload_Zipcode.Validate if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_ZipcodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_ZipcodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_ZipcodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_ZipcodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_ZipcodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_ZipcodeValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_ZipcodeValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_ZipcodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Zipcode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_ZipcodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_ZipcodeValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload_Country with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowReviewPendingPayload_Country) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingPayload_Country
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingPayload_CountryMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Country) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Country) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_CountryMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_CountryMultiError is an error wrapping multiple
// validation errors returned by
// IDnowReviewPendingPayload_Country.ValidateAll() if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_CountryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_CountryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_CountryMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_CountryValidationError is the validation error
// returned by IDnowReviewPendingPayload_Country.Validate if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_CountryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_CountryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_CountryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_CountryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_CountryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_CountryValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_CountryValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_CountryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Country.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_CountryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_CountryValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload_City with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowReviewPendingPayload_City) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingPayload_City with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingPayload_CityMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_City) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_City) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	// no validation rules for Original

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_CityMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_CityMultiError is an error wrapping multiple
// validation errors returned by IDnowReviewPendingPayload_City.ValidateAll()
// if the designated constraints aren't met.
type IDnowReviewPendingPayload_CityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_CityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_CityMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_CityValidationError is the validation error
// returned by IDnowReviewPendingPayload_City.Validate if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_CityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_CityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_CityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_CityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_CityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_CityValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_CityValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_CityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_City.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_CityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_CityValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload_Street with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowReviewPendingPayload_Street) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingPayload_Street with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingPayload_StreetMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Street) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Street) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	// no validation rules for Original

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_StreetMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_StreetMultiError is an error wrapping multiple
// validation errors returned by
// IDnowReviewPendingPayload_Street.ValidateAll() if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_StreetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_StreetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_StreetMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_StreetValidationError is the validation error
// returned by IDnowReviewPendingPayload_Street.Validate if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_StreetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_StreetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_StreetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_StreetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_StreetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_StreetValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_StreetValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_StreetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Street.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_StreetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_StreetValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload_Streetnumber
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowReviewPendingPayload_Streetnumber) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowReviewPendingPayload_Streetnumber with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IDnowReviewPendingPayload_StreetnumberMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Streetnumber) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Streetnumber) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	// no validation rules for Original

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_StreetnumberMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_StreetnumberMultiError is an error wrapping
// multiple validation errors returned by
// IDnowReviewPendingPayload_Streetnumber.ValidateAll() if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_StreetnumberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_StreetnumberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_StreetnumberMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_StreetnumberValidationError is the validation
// error returned by IDnowReviewPendingPayload_Streetnumber.Validate if the
// designated constraints aren't met.
type IDnowReviewPendingPayload_StreetnumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_StreetnumberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_StreetnumberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_StreetnumberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_StreetnumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_StreetnumberValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_StreetnumberValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_StreetnumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Streetnumber.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_StreetnumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_StreetnumberValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload_Address with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowReviewPendingPayload_Address) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingPayload_Address
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingPayload_AddressMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Address) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Address) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetZipcode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_AddressValidationError{
					field:  "Zipcode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_AddressValidationError{
					field:  "Zipcode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetZipcode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_AddressValidationError{
				field:  "Zipcode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCountry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_AddressValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_AddressValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCountry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_AddressValidationError{
				field:  "Country",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_AddressValidationError{
					field:  "City",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_AddressValidationError{
					field:  "City",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_AddressValidationError{
				field:  "City",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStreet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_AddressValidationError{
					field:  "Street",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_AddressValidationError{
					field:  "Street",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStreet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_AddressValidationError{
				field:  "Street",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStreetnumber()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_AddressValidationError{
					field:  "Streetnumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_AddressValidationError{
					field:  "Streetnumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStreetnumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_AddressValidationError{
				field:  "Streetnumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_AddressMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_AddressMultiError is an error wrapping multiple
// validation errors returned by
// IDnowReviewPendingPayload_Address.ValidateAll() if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_AddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_AddressMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_AddressValidationError is the validation error
// returned by IDnowReviewPendingPayload_Address.Validate if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_AddressValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_AddressValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Address.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_AddressValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload_Birthplace
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowReviewPendingPayload_Birthplace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingPayload_Birthplace
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingPayload_BirthplaceMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Birthplace) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Birthplace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	// no validation rules for Original

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_BirthplaceMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_BirthplaceMultiError is an error wrapping multiple
// validation errors returned by
// IDnowReviewPendingPayload_Birthplace.ValidateAll() if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_BirthplaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_BirthplaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_BirthplaceMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_BirthplaceValidationError is the validation error
// returned by IDnowReviewPendingPayload_Birthplace.Validate if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_BirthplaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_BirthplaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_BirthplaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_BirthplaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_BirthplaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_BirthplaceValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_BirthplaceValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_BirthplaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Birthplace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_BirthplaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_BirthplaceValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload_Nationality
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowReviewPendingPayload_Nationality) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingPayload_Nationality
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingPayload_NationalityMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Nationality) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Nationality) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_NationalityMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_NationalityMultiError is an error wrapping
// multiple validation errors returned by
// IDnowReviewPendingPayload_Nationality.ValidateAll() if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_NationalityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_NationalityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_NationalityMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_NationalityValidationError is the validation error
// returned by IDnowReviewPendingPayload_Nationality.Validate if the
// designated constraints aren't met.
type IDnowReviewPendingPayload_NationalityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_NationalityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_NationalityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_NationalityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_NationalityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_NationalityValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_NationalityValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_NationalityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Nationality.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_NationalityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_NationalityValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload_Gender with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowReviewPendingPayload_Gender) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingPayload_Gender with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingPayload_GenderMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Gender) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Gender) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_GenderMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_GenderMultiError is an error wrapping multiple
// validation errors returned by
// IDnowReviewPendingPayload_Gender.ValidateAll() if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_GenderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_GenderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_GenderMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_GenderValidationError is the validation error
// returned by IDnowReviewPendingPayload_Gender.Validate if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_GenderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_GenderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_GenderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_GenderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_GenderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_GenderValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_GenderValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_GenderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Gender.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_GenderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_GenderValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload_Identlanguage
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowReviewPendingPayload_Identlanguage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowReviewPendingPayload_Identlanguage with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IDnowReviewPendingPayload_IdentlanguageMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Identlanguage) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Identlanguage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_IdentlanguageMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_IdentlanguageMultiError is an error wrapping
// multiple validation errors returned by
// IDnowReviewPendingPayload_Identlanguage.ValidateAll() if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_IdentlanguageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_IdentlanguageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_IdentlanguageMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_IdentlanguageValidationError is the validation
// error returned by IDnowReviewPendingPayload_Identlanguage.Validate if the
// designated constraints aren't met.
type IDnowReviewPendingPayload_IdentlanguageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_IdentlanguageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_IdentlanguageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_IdentlanguageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_IdentlanguageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_IdentlanguageValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_IdentlanguageValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_IdentlanguageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Identlanguage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_IdentlanguageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_IdentlanguageValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload_Lastname with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowReviewPendingPayload_Lastname) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingPayload_Lastname
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingPayload_LastnameMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Lastname) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Lastname) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_LastnameMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_LastnameMultiError is an error wrapping multiple
// validation errors returned by
// IDnowReviewPendingPayload_Lastname.ValidateAll() if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_LastnameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_LastnameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_LastnameMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_LastnameValidationError is the validation error
// returned by IDnowReviewPendingPayload_Lastname.Validate if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_LastnameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_LastnameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_LastnameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_LastnameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_LastnameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_LastnameValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_LastnameValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_LastnameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Lastname.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_LastnameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_LastnameValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload_Userdata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowReviewPendingPayload_Userdata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingPayload_Userdata
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingPayload_UserdataMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Userdata) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Userdata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBirthday()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_UserdataValidationError{
					field:  "Birthday",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_UserdataValidationError{
					field:  "Birthday",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBirthday()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_UserdataValidationError{
				field:  "Birthday",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFirstname()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_UserdataValidationError{
					field:  "Firstname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_UserdataValidationError{
					field:  "Firstname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFirstname()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_UserdataValidationError{
				field:  "Firstname",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_UserdataValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_UserdataValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_UserdataValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBirthplace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_UserdataValidationError{
					field:  "Birthplace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_UserdataValidationError{
					field:  "Birthplace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBirthplace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_UserdataValidationError{
				field:  "Birthplace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNationality()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_UserdataValidationError{
					field:  "Nationality",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_UserdataValidationError{
					field:  "Nationality",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNationality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_UserdataValidationError{
				field:  "Nationality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGender()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_UserdataValidationError{
					field:  "Gender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_UserdataValidationError{
					field:  "Gender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGender()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_UserdataValidationError{
				field:  "Gender",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIdentlanguage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_UserdataValidationError{
					field:  "Identlanguage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_UserdataValidationError{
					field:  "Identlanguage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentlanguage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_UserdataValidationError{
				field:  "Identlanguage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastname()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_UserdataValidationError{
					field:  "Lastname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_UserdataValidationError{
					field:  "Lastname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastname()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_UserdataValidationError{
				field:  "Lastname",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_UserdataMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_UserdataMultiError is an error wrapping multiple
// validation errors returned by
// IDnowReviewPendingPayload_Userdata.ValidateAll() if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_UserdataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_UserdataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_UserdataMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_UserdataValidationError is the validation error
// returned by IDnowReviewPendingPayload_Userdata.Validate if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_UserdataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_UserdataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_UserdataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_UserdataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_UserdataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_UserdataValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_UserdataValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_UserdataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Userdata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_UserdataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_UserdataValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload_Country1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowReviewPendingPayload_Country1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingPayload_Country1
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingPayload_Country1MultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Country1) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Country1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_Country1MultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_Country1MultiError is an error wrapping multiple
// validation errors returned by
// IDnowReviewPendingPayload_Country1.ValidateAll() if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_Country1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_Country1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_Country1MultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_Country1ValidationError is the validation error
// returned by IDnowReviewPendingPayload_Country1.Validate if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_Country1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_Country1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_Country1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_Country1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_Country1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_Country1ValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_Country1ValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_Country1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Country1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_Country1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_Country1ValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload_Number with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowReviewPendingPayload_Number) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingPayload_Number with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingPayload_NumberMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Number) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Number) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_NumberMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_NumberMultiError is an error wrapping multiple
// validation errors returned by
// IDnowReviewPendingPayload_Number.ValidateAll() if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_NumberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_NumberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_NumberMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_NumberValidationError is the validation error
// returned by IDnowReviewPendingPayload_Number.Validate if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_NumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_NumberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_NumberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_NumberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_NumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_NumberValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_NumberValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_NumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Number.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_NumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_NumberValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload_Type with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowReviewPendingPayload_Type) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingPayload_Type with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingPayload_TypeMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Type) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Type) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_TypeMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_TypeMultiError is an error wrapping multiple
// validation errors returned by IDnowReviewPendingPayload_Type.ValidateAll()
// if the designated constraints aren't met.
type IDnowReviewPendingPayload_TypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_TypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_TypeMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_TypeValidationError is the validation error
// returned by IDnowReviewPendingPayload_Type.Validate if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_TypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_TypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_TypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_TypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_TypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_TypeValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_TypeValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_TypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Type.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_TypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_TypeValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload_Validuntil
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowReviewPendingPayload_Validuntil) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingPayload_Validuntil
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingPayload_ValiduntilMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Validuntil) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Validuntil) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_ValiduntilMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_ValiduntilMultiError is an error wrapping multiple
// validation errors returned by
// IDnowReviewPendingPayload_Validuntil.ValidateAll() if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_ValiduntilMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_ValiduntilMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_ValiduntilMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_ValiduntilValidationError is the validation error
// returned by IDnowReviewPendingPayload_Validuntil.Validate if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_ValiduntilValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_ValiduntilValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_ValiduntilValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_ValiduntilValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_ValiduntilValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_ValiduntilValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_ValiduntilValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_ValiduntilValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Validuntil.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_ValiduntilValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_ValiduntilValidationError{}

// Validate checks the field values on
// IDnowReviewPendingPayload_Identificationdocument with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowReviewPendingPayload_Identificationdocument) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowReviewPendingPayload_Identificationdocument with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// IDnowReviewPendingPayload_IdentificationdocumentMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Identificationdocument) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Identificationdocument) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCountry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_IdentificationdocumentValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_IdentificationdocumentValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCountry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_IdentificationdocumentValidationError{
				field:  "Country",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNumber()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_IdentificationdocumentValidationError{
					field:  "Number",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_IdentificationdocumentValidationError{
					field:  "Number",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_IdentificationdocumentValidationError{
				field:  "Number",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_IdentificationdocumentValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_IdentificationdocumentValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_IdentificationdocumentValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValiduntil()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_IdentificationdocumentValidationError{
					field:  "Validuntil",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayload_IdentificationdocumentValidationError{
					field:  "Validuntil",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValiduntil()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayload_IdentificationdocumentValidationError{
				field:  "Validuntil",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDriverlicenses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IDnowReviewPendingPayload_IdentificationdocumentValidationError{
						field:  fmt.Sprintf("Driverlicenses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IDnowReviewPendingPayload_IdentificationdocumentValidationError{
						field:  fmt.Sprintf("Driverlicenses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IDnowReviewPendingPayload_IdentificationdocumentValidationError{
					field:  fmt.Sprintf("Driverlicenses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_IdentificationdocumentMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_IdentificationdocumentMultiError is an error
// wrapping multiple validation errors returned by
// IDnowReviewPendingPayload_Identificationdocument.ValidateAll() if the
// designated constraints aren't met.
type IDnowReviewPendingPayload_IdentificationdocumentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_IdentificationdocumentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_IdentificationdocumentMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_IdentificationdocumentValidationError is the
// validation error returned by
// IDnowReviewPendingPayload_Identificationdocument.Validate if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_IdentificationdocumentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_IdentificationdocumentValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_IdentificationdocumentValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_IdentificationdocumentValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e IDnowReviewPendingPayload_IdentificationdocumentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_IdentificationdocumentValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_IdentificationdocumentValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_IdentificationdocumentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Identificationdocument.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_IdentificationdocumentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_IdentificationdocumentValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload_Attachments
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowReviewPendingPayload_Attachments) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingPayload_Attachments
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingPayload_AttachmentsMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload_Attachments) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload_Attachments) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pdf

	// no validation rules for Xml

	// no validation rules for Idbackside

	// no validation rules for Idfrontside

	if len(errors) > 0 {
		return IDnowReviewPendingPayload_AttachmentsMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayload_AttachmentsMultiError is an error wrapping
// multiple validation errors returned by
// IDnowReviewPendingPayload_Attachments.ValidateAll() if the designated
// constraints aren't met.
type IDnowReviewPendingPayload_AttachmentsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayload_AttachmentsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayload_AttachmentsMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayload_AttachmentsValidationError is the validation error
// returned by IDnowReviewPendingPayload_Attachments.Validate if the
// designated constraints aren't met.
type IDnowReviewPendingPayload_AttachmentsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayload_AttachmentsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayload_AttachmentsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayload_AttachmentsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayload_AttachmentsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayload_AttachmentsValidationError) ErrorName() string {
	return "IDnowReviewPendingPayload_AttachmentsValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayload_AttachmentsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload_Attachments.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayload_AttachmentsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayload_AttachmentsValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionPendingPayload_Identificationprocess with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionPendingPayload_Identificationprocess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionPendingPayload_Identificationprocess with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowFraudSuspicionPendingPayload_IdentificationprocessMultiError, or nil
// if none found.
func (m *IDnowFraudSuspicionPendingPayload_Identificationprocess) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionPendingPayload_Identificationprocess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Companyid

	// no validation rules for Filename

	if all {
		switch v := interface{}(m.GetIdentificationtime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_IdentificationprocessValidationError{
					field:  "Identificationtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_IdentificationprocessValidationError{
					field:  "Identificationtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentificationtime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionPendingPayload_IdentificationprocessValidationError{
				field:  "Identificationtime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	// no validation rules for Href

	// no validation rules for Type

	// no validation rules for Transactionnumber

	if len(errors) > 0 {
		return IDnowFraudSuspicionPendingPayload_IdentificationprocessMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionPendingPayload_IdentificationprocessMultiError is an
// error wrapping multiple validation errors returned by
// IDnowFraudSuspicionPendingPayload_Identificationprocess.ValidateAll() if
// the designated constraints aren't met.
type IDnowFraudSuspicionPendingPayload_IdentificationprocessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionPendingPayload_IdentificationprocessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionPendingPayload_IdentificationprocessMultiError) AllErrors() []error {
	return m
}

// IDnowFraudSuspicionPendingPayload_IdentificationprocessValidationError is
// the validation error returned by
// IDnowFraudSuspicionPendingPayload_Identificationprocess.Validate if the
// designated constraints aren't met.
type IDnowFraudSuspicionPendingPayload_IdentificationprocessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionPendingPayload_IdentificationprocessValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e IDnowFraudSuspicionPendingPayload_IdentificationprocessValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IDnowFraudSuspicionPendingPayload_IdentificationprocessValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e IDnowFraudSuspicionPendingPayload_IdentificationprocessValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e IDnowFraudSuspicionPendingPayload_IdentificationprocessValidationError) ErrorName() string {
	return "IDnowFraudSuspicionPendingPayload_IdentificationprocessValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionPendingPayload_IdentificationprocessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionPendingPayload_Identificationprocess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionPendingPayload_IdentificationprocessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionPendingPayload_IdentificationprocessValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionPendingPayload_Customdata with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionPendingPayload_Customdata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionPendingPayload_Customdata with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowFraudSuspicionPendingPayload_CustomdataMultiError, or nil if none found.
func (m *IDnowFraudSuspicionPendingPayload_Customdata) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionPendingPayload_Customdata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCustom3()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_CustomdataValidationError{
					field:  "Custom3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_CustomdataValidationError{
					field:  "Custom3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom3()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionPendingPayload_CustomdataValidationError{
				field:  "Custom3",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom4()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_CustomdataValidationError{
					field:  "Custom4",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_CustomdataValidationError{
					field:  "Custom4",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom4()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionPendingPayload_CustomdataValidationError{
				field:  "Custom4",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_CustomdataValidationError{
					field:  "Custom1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_CustomdataValidationError{
					field:  "Custom1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionPendingPayload_CustomdataValidationError{
				field:  "Custom1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_CustomdataValidationError{
					field:  "Custom2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_CustomdataValidationError{
					field:  "Custom2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionPendingPayload_CustomdataValidationError{
				field:  "Custom2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom5()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_CustomdataValidationError{
					field:  "Custom5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_CustomdataValidationError{
					field:  "Custom5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom5()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionPendingPayload_CustomdataValidationError{
				field:  "Custom5",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowFraudSuspicionPendingPayload_CustomdataMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionPendingPayload_CustomdataMultiError is an error wrapping
// multiple validation errors returned by
// IDnowFraudSuspicionPendingPayload_Customdata.ValidateAll() if the
// designated constraints aren't met.
type IDnowFraudSuspicionPendingPayload_CustomdataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionPendingPayload_CustomdataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionPendingPayload_CustomdataMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionPendingPayload_CustomdataValidationError is the
// validation error returned by
// IDnowFraudSuspicionPendingPayload_Customdata.Validate if the designated
// constraints aren't met.
type IDnowFraudSuspicionPendingPayload_CustomdataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionPendingPayload_CustomdataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionPendingPayload_CustomdataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionPendingPayload_CustomdataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionPendingPayload_CustomdataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionPendingPayload_CustomdataValidationError) ErrorName() string {
	return "IDnowFraudSuspicionPendingPayload_CustomdataValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionPendingPayload_CustomdataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionPendingPayload_Customdata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionPendingPayload_CustomdataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionPendingPayload_CustomdataValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionPendingPayload_Contactdata with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionPendingPayload_Contactdata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionPendingPayload_Contactdata with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowFraudSuspicionPendingPayload_ContactdataMultiError, or nil if none found.
func (m *IDnowFraudSuspicionPendingPayload_Contactdata) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionPendingPayload_Contactdata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMobilephone()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_ContactdataValidationError{
					field:  "Mobilephone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_ContactdataValidationError{
					field:  "Mobilephone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMobilephone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionPendingPayload_ContactdataValidationError{
				field:  "Mobilephone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEmail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_ContactdataValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_ContactdataValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionPendingPayload_ContactdataValidationError{
				field:  "Email",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowFraudSuspicionPendingPayload_ContactdataMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionPendingPayload_ContactdataMultiError is an error wrapping
// multiple validation errors returned by
// IDnowFraudSuspicionPendingPayload_Contactdata.ValidateAll() if the
// designated constraints aren't met.
type IDnowFraudSuspicionPendingPayload_ContactdataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionPendingPayload_ContactdataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionPendingPayload_ContactdataMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionPendingPayload_ContactdataValidationError is the
// validation error returned by
// IDnowFraudSuspicionPendingPayload_Contactdata.Validate if the designated
// constraints aren't met.
type IDnowFraudSuspicionPendingPayload_ContactdataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionPendingPayload_ContactdataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionPendingPayload_ContactdataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IDnowFraudSuspicionPendingPayload_ContactdataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionPendingPayload_ContactdataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionPendingPayload_ContactdataValidationError) ErrorName() string {
	return "IDnowFraudSuspicionPendingPayload_ContactdataValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionPendingPayload_ContactdataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionPendingPayload_Contactdata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionPendingPayload_ContactdataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionPendingPayload_ContactdataValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionPendingPayload_Address with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionPendingPayload_Address) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionPendingPayload_Address with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowFraudSuspicionPendingPayload_AddressMultiError, or nil if none found.
func (m *IDnowFraudSuspicionPendingPayload_Address) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionPendingPayload_Address) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IDnowFraudSuspicionPendingPayload_AddressMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionPendingPayload_AddressMultiError is an error wrapping
// multiple validation errors returned by
// IDnowFraudSuspicionPendingPayload_Address.ValidateAll() if the designated
// constraints aren't met.
type IDnowFraudSuspicionPendingPayload_AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionPendingPayload_AddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionPendingPayload_AddressMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionPendingPayload_AddressValidationError is the validation
// error returned by IDnowFraudSuspicionPendingPayload_Address.Validate if the
// designated constraints aren't met.
type IDnowFraudSuspicionPendingPayload_AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionPendingPayload_AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionPendingPayload_AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionPendingPayload_AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionPendingPayload_AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionPendingPayload_AddressValidationError) ErrorName() string {
	return "IDnowFraudSuspicionPendingPayload_AddressValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionPendingPayload_AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionPendingPayload_Address.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionPendingPayload_AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionPendingPayload_AddressValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionPendingPayload_Userdata with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionPendingPayload_Userdata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionPendingPayload_Userdata with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowFraudSuspicionPendingPayload_UserdataMultiError, or nil if none found.
func (m *IDnowFraudSuspicionPendingPayload_Userdata) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionPendingPayload_Userdata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_UserdataValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_UserdataValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionPendingPayload_UserdataValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowFraudSuspicionPendingPayload_UserdataMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionPendingPayload_UserdataMultiError is an error wrapping
// multiple validation errors returned by
// IDnowFraudSuspicionPendingPayload_Userdata.ValidateAll() if the designated
// constraints aren't met.
type IDnowFraudSuspicionPendingPayload_UserdataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionPendingPayload_UserdataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionPendingPayload_UserdataMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionPendingPayload_UserdataValidationError is the validation
// error returned by IDnowFraudSuspicionPendingPayload_Userdata.Validate if
// the designated constraints aren't met.
type IDnowFraudSuspicionPendingPayload_UserdataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionPendingPayload_UserdataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionPendingPayload_UserdataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionPendingPayload_UserdataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionPendingPayload_UserdataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionPendingPayload_UserdataValidationError) ErrorName() string {
	return "IDnowFraudSuspicionPendingPayload_UserdataValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionPendingPayload_UserdataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionPendingPayload_Userdata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionPendingPayload_UserdataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionPendingPayload_UserdataValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionPendingPayload_Country with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionPendingPayload_Country) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionPendingPayload_Country with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowFraudSuspicionPendingPayload_CountryMultiError, or nil if none found.
func (m *IDnowFraudSuspicionPendingPayload_Country) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionPendingPayload_Country) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowFraudSuspicionPendingPayload_CountryMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionPendingPayload_CountryMultiError is an error wrapping
// multiple validation errors returned by
// IDnowFraudSuspicionPendingPayload_Country.ValidateAll() if the designated
// constraints aren't met.
type IDnowFraudSuspicionPendingPayload_CountryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionPendingPayload_CountryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionPendingPayload_CountryMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionPendingPayload_CountryValidationError is the validation
// error returned by IDnowFraudSuspicionPendingPayload_Country.Validate if the
// designated constraints aren't met.
type IDnowFraudSuspicionPendingPayload_CountryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionPendingPayload_CountryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionPendingPayload_CountryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionPendingPayload_CountryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionPendingPayload_CountryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionPendingPayload_CountryValidationError) ErrorName() string {
	return "IDnowFraudSuspicionPendingPayload_CountryValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionPendingPayload_CountryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionPendingPayload_Country.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionPendingPayload_CountryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionPendingPayload_CountryValidationError{}

// Validate checks the field values on IDnowFraudSuspicionPendingPayload_Type
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowFraudSuspicionPendingPayload_Type) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionPendingPayload_Type with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IDnowFraudSuspicionPendingPayload_TypeMultiError, or nil if none found.
func (m *IDnowFraudSuspicionPendingPayload_Type) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionPendingPayload_Type) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowFraudSuspicionPendingPayload_TypeMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionPendingPayload_TypeMultiError is an error wrapping
// multiple validation errors returned by
// IDnowFraudSuspicionPendingPayload_Type.ValidateAll() if the designated
// constraints aren't met.
type IDnowFraudSuspicionPendingPayload_TypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionPendingPayload_TypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionPendingPayload_TypeMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionPendingPayload_TypeValidationError is the validation
// error returned by IDnowFraudSuspicionPendingPayload_Type.Validate if the
// designated constraints aren't met.
type IDnowFraudSuspicionPendingPayload_TypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionPendingPayload_TypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionPendingPayload_TypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionPendingPayload_TypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionPendingPayload_TypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionPendingPayload_TypeValidationError) ErrorName() string {
	return "IDnowFraudSuspicionPendingPayload_TypeValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionPendingPayload_TypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionPendingPayload_Type.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionPendingPayload_TypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionPendingPayload_TypeValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionPendingPayload_Identificationdocument with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionPendingPayload_Identificationdocument) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionPendingPayload_Identificationdocument with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowFraudSuspicionPendingPayload_IdentificationdocumentMultiError, or nil
// if none found.
func (m *IDnowFraudSuspicionPendingPayload_Identificationdocument) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionPendingPayload_Identificationdocument) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCountry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_IdentificationdocumentValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_IdentificationdocumentValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCountry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionPendingPayload_IdentificationdocumentValidationError{
				field:  "Country",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_IdentificationdocumentValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayload_IdentificationdocumentValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionPendingPayload_IdentificationdocumentValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowFraudSuspicionPendingPayload_IdentificationdocumentMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionPendingPayload_IdentificationdocumentMultiError is an
// error wrapping multiple validation errors returned by
// IDnowFraudSuspicionPendingPayload_Identificationdocument.ValidateAll() if
// the designated constraints aren't met.
type IDnowFraudSuspicionPendingPayload_IdentificationdocumentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionPendingPayload_IdentificationdocumentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionPendingPayload_IdentificationdocumentMultiError) AllErrors() []error {
	return m
}

// IDnowFraudSuspicionPendingPayload_IdentificationdocumentValidationError is
// the validation error returned by
// IDnowFraudSuspicionPendingPayload_Identificationdocument.Validate if the
// designated constraints aren't met.
type IDnowFraudSuspicionPendingPayload_IdentificationdocumentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionPendingPayload_IdentificationdocumentValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e IDnowFraudSuspicionPendingPayload_IdentificationdocumentValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IDnowFraudSuspicionPendingPayload_IdentificationdocumentValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e IDnowFraudSuspicionPendingPayload_IdentificationdocumentValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e IDnowFraudSuspicionPendingPayload_IdentificationdocumentValidationError) ErrorName() string {
	return "IDnowFraudSuspicionPendingPayload_IdentificationdocumentValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionPendingPayload_IdentificationdocumentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionPendingPayload_Identificationdocument.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionPendingPayload_IdentificationdocumentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionPendingPayload_IdentificationdocumentValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionPendingPayload_Attachments with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionPendingPayload_Attachments) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionPendingPayload_Attachments with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowFraudSuspicionPendingPayload_AttachmentsMultiError, or nil if none found.
func (m *IDnowFraudSuspicionPendingPayload_Attachments) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionPendingPayload_Attachments) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pdf

	// no validation rules for Xml

	// no validation rules for Idbackside

	// no validation rules for Idfrontside

	// no validation rules for Userface

	// no validation rules for Livenessleft

	// no validation rules for Livenessright

	if len(errors) > 0 {
		return IDnowFraudSuspicionPendingPayload_AttachmentsMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionPendingPayload_AttachmentsMultiError is an error wrapping
// multiple validation errors returned by
// IDnowFraudSuspicionPendingPayload_Attachments.ValidateAll() if the
// designated constraints aren't met.
type IDnowFraudSuspicionPendingPayload_AttachmentsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionPendingPayload_AttachmentsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionPendingPayload_AttachmentsMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionPendingPayload_AttachmentsValidationError is the
// validation error returned by
// IDnowFraudSuspicionPendingPayload_Attachments.Validate if the designated
// constraints aren't met.
type IDnowFraudSuspicionPendingPayload_AttachmentsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionPendingPayload_AttachmentsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionPendingPayload_AttachmentsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IDnowFraudSuspicionPendingPayload_AttachmentsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionPendingPayload_AttachmentsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionPendingPayload_AttachmentsValidationError) ErrorName() string {
	return "IDnowFraudSuspicionPendingPayload_AttachmentsValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionPendingPayload_AttachmentsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionPendingPayload_Attachments.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionPendingPayload_AttachmentsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionPendingPayload_AttachmentsValidationError{}

// Validate checks the field values on
// IDnowSuccessDataChangedPayload_Identificationprocess with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessDataChangedPayload_Identificationprocess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowSuccessDataChangedPayload_Identificationprocess with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_IdentificationprocessMultiError, or nil if
// none found.
func (m *IDnowSuccessDataChangedPayload_Identificationprocess) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Identificationprocess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Companyid

	// no validation rules for Filename

	if all {
		switch v := interface{}(m.GetIdentificationtime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_IdentificationprocessValidationError{
					field:  "Identificationtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_IdentificationprocessValidationError{
					field:  "Identificationtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentificationtime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_IdentificationprocessValidationError{
				field:  "Identificationtime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	// no validation rules for Href

	// no validation rules for Type

	// no validation rules for Transactionnumber

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_IdentificationprocessMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_IdentificationprocessMultiError is an error
// wrapping multiple validation errors returned by
// IDnowSuccessDataChangedPayload_Identificationprocess.ValidateAll() if the
// designated constraints aren't met.
type IDnowSuccessDataChangedPayload_IdentificationprocessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_IdentificationprocessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_IdentificationprocessMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_IdentificationprocessValidationError is the
// validation error returned by
// IDnowSuccessDataChangedPayload_Identificationprocess.Validate if the
// designated constraints aren't met.
type IDnowSuccessDataChangedPayload_IdentificationprocessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_IdentificationprocessValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_IdentificationprocessValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_IdentificationprocessValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_IdentificationprocessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_IdentificationprocessValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_IdentificationprocessValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_IdentificationprocessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Identificationprocess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_IdentificationprocessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_IdentificationprocessValidationError{}

// Validate checks the field values on
// IDnowSuccessDataChangedPayload_Customdata with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessDataChangedPayload_Customdata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowSuccessDataChangedPayload_Customdata with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_CustomdataMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload_Customdata) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Customdata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCustom3()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_CustomdataValidationError{
					field:  "Custom3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_CustomdataValidationError{
					field:  "Custom3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom3()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_CustomdataValidationError{
				field:  "Custom3",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom4()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_CustomdataValidationError{
					field:  "Custom4",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_CustomdataValidationError{
					field:  "Custom4",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom4()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_CustomdataValidationError{
				field:  "Custom4",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_CustomdataValidationError{
					field:  "Custom1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_CustomdataValidationError{
					field:  "Custom1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_CustomdataValidationError{
				field:  "Custom1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_CustomdataValidationError{
					field:  "Custom2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_CustomdataValidationError{
					field:  "Custom2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_CustomdataValidationError{
				field:  "Custom2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom5()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_CustomdataValidationError{
					field:  "Custom5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_CustomdataValidationError{
					field:  "Custom5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom5()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_CustomdataValidationError{
				field:  "Custom5",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_CustomdataMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_CustomdataMultiError is an error wrapping
// multiple validation errors returned by
// IDnowSuccessDataChangedPayload_Customdata.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_CustomdataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_CustomdataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_CustomdataMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_CustomdataValidationError is the validation
// error returned by IDnowSuccessDataChangedPayload_Customdata.Validate if the
// designated constraints aren't met.
type IDnowSuccessDataChangedPayload_CustomdataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_CustomdataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_CustomdataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_CustomdataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_CustomdataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_CustomdataValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_CustomdataValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_CustomdataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Customdata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_CustomdataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_CustomdataValidationError{}

// Validate checks the field values on
// IDnowSuccessDataChangedPayload_Contactdata with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessDataChangedPayload_Contactdata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowSuccessDataChangedPayload_Contactdata with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_ContactdataMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload_Contactdata) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Contactdata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mobilephone

	// no validation rules for Email

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_ContactdataMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_ContactdataMultiError is an error wrapping
// multiple validation errors returned by
// IDnowSuccessDataChangedPayload_Contactdata.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_ContactdataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_ContactdataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_ContactdataMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_ContactdataValidationError is the validation
// error returned by IDnowSuccessDataChangedPayload_Contactdata.Validate if
// the designated constraints aren't met.
type IDnowSuccessDataChangedPayload_ContactdataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_ContactdataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_ContactdataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_ContactdataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_ContactdataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_ContactdataValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_ContactdataValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_ContactdataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Contactdata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_ContactdataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_ContactdataValidationError{}

// Validate checks the field values on IDnowSuccessDataChangedPayload_Birthday
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowSuccessDataChangedPayload_Birthday) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowSuccessDataChangedPayload_Birthday with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_BirthdayMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload_Birthday) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Birthday) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	// no validation rules for Original

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_BirthdayMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_BirthdayMultiError is an error wrapping
// multiple validation errors returned by
// IDnowSuccessDataChangedPayload_Birthday.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_BirthdayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_BirthdayMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_BirthdayMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_BirthdayValidationError is the validation
// error returned by IDnowSuccessDataChangedPayload_Birthday.Validate if the
// designated constraints aren't met.
type IDnowSuccessDataChangedPayload_BirthdayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_BirthdayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_BirthdayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_BirthdayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_BirthdayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_BirthdayValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_BirthdayValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_BirthdayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Birthday.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_BirthdayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_BirthdayValidationError{}

// Validate checks the field values on IDnowSuccessDataChangedPayload_Firstname
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowSuccessDataChangedPayload_Firstname) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowSuccessDataChangedPayload_Firstname with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_FirstnameMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload_Firstname) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Firstname) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_FirstnameMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_FirstnameMultiError is an error wrapping
// multiple validation errors returned by
// IDnowSuccessDataChangedPayload_Firstname.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_FirstnameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_FirstnameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_FirstnameMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_FirstnameValidationError is the validation
// error returned by IDnowSuccessDataChangedPayload_Firstname.Validate if the
// designated constraints aren't met.
type IDnowSuccessDataChangedPayload_FirstnameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_FirstnameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_FirstnameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_FirstnameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_FirstnameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_FirstnameValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_FirstnameValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_FirstnameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Firstname.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_FirstnameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_FirstnameValidationError{}

// Validate checks the field values on IDnowSuccessDataChangedPayload_Zipcode
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowSuccessDataChangedPayload_Zipcode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowSuccessDataChangedPayload_Zipcode with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_ZipcodeMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload_Zipcode) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Zipcode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_ZipcodeMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_ZipcodeMultiError is an error wrapping
// multiple validation errors returned by
// IDnowSuccessDataChangedPayload_Zipcode.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_ZipcodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_ZipcodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_ZipcodeMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_ZipcodeValidationError is the validation
// error returned by IDnowSuccessDataChangedPayload_Zipcode.Validate if the
// designated constraints aren't met.
type IDnowSuccessDataChangedPayload_ZipcodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_ZipcodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_ZipcodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_ZipcodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_ZipcodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_ZipcodeValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_ZipcodeValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_ZipcodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Zipcode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_ZipcodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_ZipcodeValidationError{}

// Validate checks the field values on IDnowSuccessDataChangedPayload_Country
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowSuccessDataChangedPayload_Country) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowSuccessDataChangedPayload_Country with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_CountryMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload_Country) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Country) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_CountryMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_CountryMultiError is an error wrapping
// multiple validation errors returned by
// IDnowSuccessDataChangedPayload_Country.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_CountryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_CountryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_CountryMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_CountryValidationError is the validation
// error returned by IDnowSuccessDataChangedPayload_Country.Validate if the
// designated constraints aren't met.
type IDnowSuccessDataChangedPayload_CountryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_CountryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_CountryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_CountryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_CountryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_CountryValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_CountryValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_CountryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Country.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_CountryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_CountryValidationError{}

// Validate checks the field values on IDnowSuccessDataChangedPayload_City with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowSuccessDataChangedPayload_City) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessDataChangedPayload_City
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_CityMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload_City) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_City) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_CityMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_CityMultiError is an error wrapping multiple
// validation errors returned by
// IDnowSuccessDataChangedPayload_City.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_CityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_CityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_CityMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_CityValidationError is the validation error
// returned by IDnowSuccessDataChangedPayload_City.Validate if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_CityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_CityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_CityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_CityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_CityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_CityValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_CityValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_CityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_City.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_CityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_CityValidationError{}

// Validate checks the field values on IDnowSuccessDataChangedPayload_Street
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowSuccessDataChangedPayload_Street) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessDataChangedPayload_Street
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_StreetMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload_Street) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Street) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	// no validation rules for Original

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_StreetMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_StreetMultiError is an error wrapping
// multiple validation errors returned by
// IDnowSuccessDataChangedPayload_Street.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_StreetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_StreetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_StreetMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_StreetValidationError is the validation error
// returned by IDnowSuccessDataChangedPayload_Street.Validate if the
// designated constraints aren't met.
type IDnowSuccessDataChangedPayload_StreetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_StreetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_StreetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_StreetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_StreetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_StreetValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_StreetValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_StreetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Street.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_StreetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_StreetValidationError{}

// Validate checks the field values on
// IDnowSuccessDataChangedPayload_Streetnumber with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessDataChangedPayload_Streetnumber) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowSuccessDataChangedPayload_Streetnumber with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_StreetnumberMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload_Streetnumber) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Streetnumber) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_StreetnumberMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_StreetnumberMultiError is an error wrapping
// multiple validation errors returned by
// IDnowSuccessDataChangedPayload_Streetnumber.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_StreetnumberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_StreetnumberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_StreetnumberMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_StreetnumberValidationError is the validation
// error returned by IDnowSuccessDataChangedPayload_Streetnumber.Validate if
// the designated constraints aren't met.
type IDnowSuccessDataChangedPayload_StreetnumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_StreetnumberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_StreetnumberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_StreetnumberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_StreetnumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_StreetnumberValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_StreetnumberValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_StreetnumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Streetnumber.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_StreetnumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_StreetnumberValidationError{}

// Validate checks the field values on IDnowSuccessDataChangedPayload_Address
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowSuccessDataChangedPayload_Address) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowSuccessDataChangedPayload_Address with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_AddressMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload_Address) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Address) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetZipcode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_AddressValidationError{
					field:  "Zipcode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_AddressValidationError{
					field:  "Zipcode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetZipcode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_AddressValidationError{
				field:  "Zipcode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCountry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_AddressValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_AddressValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCountry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_AddressValidationError{
				field:  "Country",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_AddressValidationError{
					field:  "City",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_AddressValidationError{
					field:  "City",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_AddressValidationError{
				field:  "City",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStreet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_AddressValidationError{
					field:  "Street",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_AddressValidationError{
					field:  "Street",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStreet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_AddressValidationError{
				field:  "Street",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStreetnumber()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_AddressValidationError{
					field:  "Streetnumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_AddressValidationError{
					field:  "Streetnumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStreetnumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_AddressValidationError{
				field:  "Streetnumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_AddressMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_AddressMultiError is an error wrapping
// multiple validation errors returned by
// IDnowSuccessDataChangedPayload_Address.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_AddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_AddressMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_AddressValidationError is the validation
// error returned by IDnowSuccessDataChangedPayload_Address.Validate if the
// designated constraints aren't met.
type IDnowSuccessDataChangedPayload_AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_AddressValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_AddressValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Address.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_AddressValidationError{}

// Validate checks the field values on
// IDnowSuccessDataChangedPayload_Birthplace with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessDataChangedPayload_Birthplace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowSuccessDataChangedPayload_Birthplace with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_BirthplaceMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload_Birthplace) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Birthplace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	// no validation rules for Original

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_BirthplaceMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_BirthplaceMultiError is an error wrapping
// multiple validation errors returned by
// IDnowSuccessDataChangedPayload_Birthplace.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_BirthplaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_BirthplaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_BirthplaceMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_BirthplaceValidationError is the validation
// error returned by IDnowSuccessDataChangedPayload_Birthplace.Validate if the
// designated constraints aren't met.
type IDnowSuccessDataChangedPayload_BirthplaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_BirthplaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_BirthplaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_BirthplaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_BirthplaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_BirthplaceValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_BirthplaceValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_BirthplaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Birthplace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_BirthplaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_BirthplaceValidationError{}

// Validate checks the field values on
// IDnowSuccessDataChangedPayload_Nationality with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessDataChangedPayload_Nationality) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowSuccessDataChangedPayload_Nationality with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_NationalityMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload_Nationality) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Nationality) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_NationalityMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_NationalityMultiError is an error wrapping
// multiple validation errors returned by
// IDnowSuccessDataChangedPayload_Nationality.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_NationalityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_NationalityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_NationalityMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_NationalityValidationError is the validation
// error returned by IDnowSuccessDataChangedPayload_Nationality.Validate if
// the designated constraints aren't met.
type IDnowSuccessDataChangedPayload_NationalityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_NationalityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_NationalityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_NationalityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_NationalityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_NationalityValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_NationalityValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_NationalityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Nationality.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_NationalityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_NationalityValidationError{}

// Validate checks the field values on IDnowSuccessDataChangedPayload_Gender
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowSuccessDataChangedPayload_Gender) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessDataChangedPayload_Gender
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_GenderMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload_Gender) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Gender) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_GenderMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_GenderMultiError is an error wrapping
// multiple validation errors returned by
// IDnowSuccessDataChangedPayload_Gender.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_GenderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_GenderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_GenderMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_GenderValidationError is the validation error
// returned by IDnowSuccessDataChangedPayload_Gender.Validate if the
// designated constraints aren't met.
type IDnowSuccessDataChangedPayload_GenderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_GenderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_GenderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_GenderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_GenderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_GenderValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_GenderValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_GenderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Gender.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_GenderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_GenderValidationError{}

// Validate checks the field values on
// IDnowSuccessDataChangedPayload_Identlanguage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessDataChangedPayload_Identlanguage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowSuccessDataChangedPayload_Identlanguage with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_IdentlanguageMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload_Identlanguage) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Identlanguage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_IdentlanguageMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_IdentlanguageMultiError is an error wrapping
// multiple validation errors returned by
// IDnowSuccessDataChangedPayload_Identlanguage.ValidateAll() if the
// designated constraints aren't met.
type IDnowSuccessDataChangedPayload_IdentlanguageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_IdentlanguageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_IdentlanguageMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_IdentlanguageValidationError is the
// validation error returned by
// IDnowSuccessDataChangedPayload_Identlanguage.Validate if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_IdentlanguageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_IdentlanguageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_IdentlanguageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_IdentlanguageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_IdentlanguageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_IdentlanguageValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_IdentlanguageValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_IdentlanguageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Identlanguage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_IdentlanguageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_IdentlanguageValidationError{}

// Validate checks the field values on IDnowSuccessDataChangedPayload_Lastname
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowSuccessDataChangedPayload_Lastname) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowSuccessDataChangedPayload_Lastname with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_LastnameMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload_Lastname) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Lastname) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_LastnameMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_LastnameMultiError is an error wrapping
// multiple validation errors returned by
// IDnowSuccessDataChangedPayload_Lastname.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_LastnameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_LastnameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_LastnameMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_LastnameValidationError is the validation
// error returned by IDnowSuccessDataChangedPayload_Lastname.Validate if the
// designated constraints aren't met.
type IDnowSuccessDataChangedPayload_LastnameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_LastnameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_LastnameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_LastnameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_LastnameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_LastnameValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_LastnameValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_LastnameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Lastname.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_LastnameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_LastnameValidationError{}

// Validate checks the field values on IDnowSuccessDataChangedPayload_Userdata
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowSuccessDataChangedPayload_Userdata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowSuccessDataChangedPayload_Userdata with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_UserdataMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload_Userdata) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Userdata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBirthday()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_UserdataValidationError{
					field:  "Birthday",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_UserdataValidationError{
					field:  "Birthday",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBirthday()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_UserdataValidationError{
				field:  "Birthday",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFirstname()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_UserdataValidationError{
					field:  "Firstname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_UserdataValidationError{
					field:  "Firstname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFirstname()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_UserdataValidationError{
				field:  "Firstname",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_UserdataValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_UserdataValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_UserdataValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBirthplace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_UserdataValidationError{
					field:  "Birthplace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_UserdataValidationError{
					field:  "Birthplace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBirthplace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_UserdataValidationError{
				field:  "Birthplace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNationality()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_UserdataValidationError{
					field:  "Nationality",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_UserdataValidationError{
					field:  "Nationality",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNationality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_UserdataValidationError{
				field:  "Nationality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGender()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_UserdataValidationError{
					field:  "Gender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_UserdataValidationError{
					field:  "Gender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGender()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_UserdataValidationError{
				field:  "Gender",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIdentlanguage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_UserdataValidationError{
					field:  "Identlanguage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_UserdataValidationError{
					field:  "Identlanguage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentlanguage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_UserdataValidationError{
				field:  "Identlanguage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastname()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_UserdataValidationError{
					field:  "Lastname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_UserdataValidationError{
					field:  "Lastname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastname()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_UserdataValidationError{
				field:  "Lastname",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_UserdataMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_UserdataMultiError is an error wrapping
// multiple validation errors returned by
// IDnowSuccessDataChangedPayload_Userdata.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_UserdataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_UserdataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_UserdataMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_UserdataValidationError is the validation
// error returned by IDnowSuccessDataChangedPayload_Userdata.Validate if the
// designated constraints aren't met.
type IDnowSuccessDataChangedPayload_UserdataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_UserdataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_UserdataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_UserdataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_UserdataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_UserdataValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_UserdataValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_UserdataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Userdata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_UserdataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_UserdataValidationError{}

// Validate checks the field values on IDnowSuccessDataChangedPayload_Country1
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowSuccessDataChangedPayload_Country1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowSuccessDataChangedPayload_Country1 with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_Country1MultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload_Country1) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Country1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_Country1MultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_Country1MultiError is an error wrapping
// multiple validation errors returned by
// IDnowSuccessDataChangedPayload_Country1.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_Country1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_Country1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_Country1MultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_Country1ValidationError is the validation
// error returned by IDnowSuccessDataChangedPayload_Country1.Validate if the
// designated constraints aren't met.
type IDnowSuccessDataChangedPayload_Country1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_Country1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_Country1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_Country1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_Country1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_Country1ValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_Country1ValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_Country1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Country1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_Country1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_Country1ValidationError{}

// Validate checks the field values on IDnowSuccessDataChangedPayload_Number
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowSuccessDataChangedPayload_Number) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessDataChangedPayload_Number
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_NumberMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload_Number) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Number) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_NumberMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_NumberMultiError is an error wrapping
// multiple validation errors returned by
// IDnowSuccessDataChangedPayload_Number.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_NumberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_NumberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_NumberMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_NumberValidationError is the validation error
// returned by IDnowSuccessDataChangedPayload_Number.Validate if the
// designated constraints aren't met.
type IDnowSuccessDataChangedPayload_NumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_NumberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_NumberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_NumberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_NumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_NumberValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_NumberValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_NumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Number.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_NumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_NumberValidationError{}

// Validate checks the field values on IDnowSuccessDataChangedPayload_Type with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowSuccessDataChangedPayload_Type) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessDataChangedPayload_Type
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_TypeMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload_Type) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Type) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_TypeMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_TypeMultiError is an error wrapping multiple
// validation errors returned by
// IDnowSuccessDataChangedPayload_Type.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_TypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_TypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_TypeMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_TypeValidationError is the validation error
// returned by IDnowSuccessDataChangedPayload_Type.Validate if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_TypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_TypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_TypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_TypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_TypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_TypeValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_TypeValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_TypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Type.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_TypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_TypeValidationError{}

// Validate checks the field values on
// IDnowSuccessDataChangedPayload_Validuntil with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessDataChangedPayload_Validuntil) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowSuccessDataChangedPayload_Validuntil with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_ValiduntilMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload_Validuntil) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Validuntil) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_ValiduntilMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_ValiduntilMultiError is an error wrapping
// multiple validation errors returned by
// IDnowSuccessDataChangedPayload_Validuntil.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_ValiduntilMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_ValiduntilMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_ValiduntilMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_ValiduntilValidationError is the validation
// error returned by IDnowSuccessDataChangedPayload_Validuntil.Validate if the
// designated constraints aren't met.
type IDnowSuccessDataChangedPayload_ValiduntilValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_ValiduntilValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_ValiduntilValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_ValiduntilValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_ValiduntilValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_ValiduntilValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_ValiduntilValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_ValiduntilValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Validuntil.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_ValiduntilValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_ValiduntilValidationError{}

// Validate checks the field values on
// IDnowSuccessDataChangedPayload_Identificationdocument with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessDataChangedPayload_Identificationdocument) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowSuccessDataChangedPayload_Identificationdocument with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_IdentificationdocumentMultiError, or nil if
// none found.
func (m *IDnowSuccessDataChangedPayload_Identificationdocument) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Identificationdocument) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCountry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCountry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError{
				field:  "Country",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNumber()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError{
					field:  "Number",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError{
					field:  "Number",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError{
				field:  "Number",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValiduntil()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError{
					field:  "Validuntil",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError{
					field:  "Validuntil",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValiduntil()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError{
				field:  "Validuntil",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDriverlicenses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError{
						field:  fmt.Sprintf("Driverlicenses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError{
						field:  fmt.Sprintf("Driverlicenses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError{
					field:  fmt.Sprintf("Driverlicenses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_IdentificationdocumentMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_IdentificationdocumentMultiError is an error
// wrapping multiple validation errors returned by
// IDnowSuccessDataChangedPayload_Identificationdocument.ValidateAll() if the
// designated constraints aren't met.
type IDnowSuccessDataChangedPayload_IdentificationdocumentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_IdentificationdocumentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_IdentificationdocumentMultiError) AllErrors() []error {
	return m
}

// IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError is the
// validation error returned by
// IDnowSuccessDataChangedPayload_Identificationdocument.Validate if the
// designated constraints aren't met.
type IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Identificationdocument.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_IdentificationdocumentValidationError{}

// Validate checks the field values on
// IDnowSuccessDataChangedPayload_Attachments with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessDataChangedPayload_Attachments) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowSuccessDataChangedPayload_Attachments with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowSuccessDataChangedPayload_AttachmentsMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload_Attachments) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload_Attachments) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pdf

	// no validation rules for Xml

	// no validation rules for Idbackside

	// no validation rules for Idfrontside

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayload_AttachmentsMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayload_AttachmentsMultiError is an error wrapping
// multiple validation errors returned by
// IDnowSuccessDataChangedPayload_Attachments.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayload_AttachmentsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayload_AttachmentsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayload_AttachmentsMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayload_AttachmentsValidationError is the validation
// error returned by IDnowSuccessDataChangedPayload_Attachments.Validate if
// the designated constraints aren't met.
type IDnowSuccessDataChangedPayload_AttachmentsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayload_AttachmentsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayload_AttachmentsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayload_AttachmentsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayload_AttachmentsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayload_AttachmentsValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayload_AttachmentsValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayload_AttachmentsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload_Attachments.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayload_AttachmentsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayload_AttachmentsValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Identificationprocess with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Identificationprocess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Identificationprocess with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_IdentificationprocessMultiError, or nil
// if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Identificationprocess) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Identificationprocess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Companyid

	// no validation rules for Filename

	if all {
		switch v := interface{}(m.GetIdentificationtime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_IdentificationprocessValidationError{
					field:  "Identificationtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_IdentificationprocessValidationError{
					field:  "Identificationtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentificationtime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_IdentificationprocessValidationError{
				field:  "Identificationtime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	// no validation rules for Href

	// no validation rules for Type

	// no validation rules for Transactionnumber

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_IdentificationprocessMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_IdentificationprocessMultiError is an
// error wrapping multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Identificationprocess.ValidateAll() if
// the designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_IdentificationprocessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_IdentificationprocessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_IdentificationprocessMultiError) AllErrors() []error {
	return m
}

// IDnowFraudSuspicionConfirmedPayload_IdentificationprocessValidationError is
// the validation error returned by
// IDnowFraudSuspicionConfirmedPayload_Identificationprocess.Validate if the
// designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_IdentificationprocessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_IdentificationprocessValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_IdentificationprocessValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_IdentificationprocessValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_IdentificationprocessValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_IdentificationprocessValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_IdentificationprocessValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_IdentificationprocessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Identificationprocess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_IdentificationprocessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_IdentificationprocessValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Customdata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Customdata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Customdata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_CustomdataMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Customdata) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Customdata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCustom3()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError{
					field:  "Custom3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError{
					field:  "Custom3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom3()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError{
				field:  "Custom3",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom4()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError{
					field:  "Custom4",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError{
					field:  "Custom4",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom4()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError{
				field:  "Custom4",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError{
					field:  "Custom1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError{
					field:  "Custom1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError{
				field:  "Custom1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError{
					field:  "Custom2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError{
					field:  "Custom2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError{
				field:  "Custom2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom5()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError{
					field:  "Custom5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError{
					field:  "Custom5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom5()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError{
				field:  "Custom5",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_CustomdataMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_CustomdataMultiError is an error
// wrapping multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Customdata.ValidateAll() if the
// designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_CustomdataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_CustomdataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_CustomdataMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError is the
// validation error returned by
// IDnowFraudSuspicionConfirmedPayload_Customdata.Validate if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Customdata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_CustomdataValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Contactdata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Contactdata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Contactdata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_ContactdataMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Contactdata) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Contactdata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mobilephone

	// no validation rules for Email

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_ContactdataMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_ContactdataMultiError is an error
// wrapping multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Contactdata.ValidateAll() if the
// designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_ContactdataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_ContactdataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_ContactdataMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayload_ContactdataValidationError is the
// validation error returned by
// IDnowFraudSuspicionConfirmedPayload_Contactdata.Validate if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_ContactdataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_ContactdataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_ContactdataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_ContactdataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_ContactdataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_ContactdataValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_ContactdataValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_ContactdataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Contactdata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_ContactdataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_ContactdataValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Birthday with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Birthday) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Birthday with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_BirthdayMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Birthday) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Birthday) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	// no validation rules for Original

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_BirthdayMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_BirthdayMultiError is an error wrapping
// multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Birthday.ValidateAll() if the
// designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_BirthdayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_BirthdayMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_BirthdayMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayload_BirthdayValidationError is the
// validation error returned by
// IDnowFraudSuspicionConfirmedPayload_Birthday.Validate if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_BirthdayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_BirthdayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_BirthdayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_BirthdayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_BirthdayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_BirthdayValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_BirthdayValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_BirthdayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Birthday.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_BirthdayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_BirthdayValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Firstname with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Firstname) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Firstname with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_FirstnameMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Firstname) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Firstname) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_FirstnameMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_FirstnameMultiError is an error wrapping
// multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Firstname.ValidateAll() if the
// designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_FirstnameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_FirstnameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_FirstnameMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayload_FirstnameValidationError is the
// validation error returned by
// IDnowFraudSuspicionConfirmedPayload_Firstname.Validate if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_FirstnameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_FirstnameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_FirstnameValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_FirstnameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_FirstnameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_FirstnameValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_FirstnameValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_FirstnameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Firstname.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_FirstnameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_FirstnameValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Zipcode with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Zipcode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Zipcode with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_ZipcodeMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Zipcode) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Zipcode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_ZipcodeMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_ZipcodeMultiError is an error wrapping
// multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Zipcode.ValidateAll() if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_ZipcodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_ZipcodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_ZipcodeMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayload_ZipcodeValidationError is the validation
// error returned by IDnowFraudSuspicionConfirmedPayload_Zipcode.Validate if
// the designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_ZipcodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_ZipcodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_ZipcodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_ZipcodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_ZipcodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_ZipcodeValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_ZipcodeValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_ZipcodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Zipcode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_ZipcodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_ZipcodeValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Country with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Country) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Country with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_CountryMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Country) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Country) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_CountryMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_CountryMultiError is an error wrapping
// multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Country.ValidateAll() if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_CountryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_CountryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_CountryMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayload_CountryValidationError is the validation
// error returned by IDnowFraudSuspicionConfirmedPayload_Country.Validate if
// the designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_CountryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_CountryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_CountryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_CountryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_CountryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_CountryValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_CountryValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_CountryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Country.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_CountryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_CountryValidationError{}

// Validate checks the field values on IDnowFraudSuspicionConfirmedPayload_City
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_City) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_City with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_CityMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_City) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_City) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_CityMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_CityMultiError is an error wrapping
// multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_City.ValidateAll() if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_CityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_CityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_CityMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayload_CityValidationError is the validation
// error returned by IDnowFraudSuspicionConfirmedPayload_City.Validate if the
// designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_CityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_CityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_CityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_CityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_CityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_CityValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_CityValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_CityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_City.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_CityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_CityValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Street with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Street) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Street with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_StreetMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Street) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Street) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	// no validation rules for Original

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_StreetMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_StreetMultiError is an error wrapping
// multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Street.ValidateAll() if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_StreetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_StreetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_StreetMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayload_StreetValidationError is the validation
// error returned by IDnowFraudSuspicionConfirmedPayload_Street.Validate if
// the designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_StreetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_StreetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_StreetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_StreetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_StreetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_StreetValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_StreetValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_StreetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Street.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_StreetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_StreetValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Streetnumber with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Streetnumber) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Streetnumber with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_StreetnumberMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Streetnumber) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Streetnumber) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_StreetnumberMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_StreetnumberMultiError is an error
// wrapping multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Streetnumber.ValidateAll() if the
// designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_StreetnumberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_StreetnumberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_StreetnumberMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayload_StreetnumberValidationError is the
// validation error returned by
// IDnowFraudSuspicionConfirmedPayload_Streetnumber.Validate if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_StreetnumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_StreetnumberValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_StreetnumberValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_StreetnumberValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_StreetnumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_StreetnumberValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_StreetnumberValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_StreetnumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Streetnumber.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_StreetnumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_StreetnumberValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Address with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Address) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Address with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_AddressMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Address) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Address) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetZipcode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_AddressValidationError{
					field:  "Zipcode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_AddressValidationError{
					field:  "Zipcode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetZipcode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_AddressValidationError{
				field:  "Zipcode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCountry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_AddressValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_AddressValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCountry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_AddressValidationError{
				field:  "Country",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_AddressValidationError{
					field:  "City",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_AddressValidationError{
					field:  "City",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_AddressValidationError{
				field:  "City",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStreet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_AddressValidationError{
					field:  "Street",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_AddressValidationError{
					field:  "Street",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStreet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_AddressValidationError{
				field:  "Street",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStreetnumber()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_AddressValidationError{
					field:  "Streetnumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_AddressValidationError{
					field:  "Streetnumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStreetnumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_AddressValidationError{
				field:  "Streetnumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_AddressMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_AddressMultiError is an error wrapping
// multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Address.ValidateAll() if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_AddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_AddressMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayload_AddressValidationError is the validation
// error returned by IDnowFraudSuspicionConfirmedPayload_Address.Validate if
// the designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_AddressValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_AddressValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Address.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_AddressValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Birthplace with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Birthplace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Birthplace with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_BirthplaceMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Birthplace) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Birthplace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	// no validation rules for Original

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_BirthplaceMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_BirthplaceMultiError is an error
// wrapping multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Birthplace.ValidateAll() if the
// designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_BirthplaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_BirthplaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_BirthplaceMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayload_BirthplaceValidationError is the
// validation error returned by
// IDnowFraudSuspicionConfirmedPayload_Birthplace.Validate if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_BirthplaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_BirthplaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_BirthplaceValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_BirthplaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_BirthplaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_BirthplaceValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_BirthplaceValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_BirthplaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Birthplace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_BirthplaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_BirthplaceValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Nationality with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Nationality) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Nationality with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_NationalityMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Nationality) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Nationality) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_NationalityMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_NationalityMultiError is an error
// wrapping multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Nationality.ValidateAll() if the
// designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_NationalityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_NationalityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_NationalityMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayload_NationalityValidationError is the
// validation error returned by
// IDnowFraudSuspicionConfirmedPayload_Nationality.Validate if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_NationalityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_NationalityValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_NationalityValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_NationalityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_NationalityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_NationalityValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_NationalityValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_NationalityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Nationality.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_NationalityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_NationalityValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Gender with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Gender) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Gender with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_GenderMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Gender) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Gender) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_GenderMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_GenderMultiError is an error wrapping
// multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Gender.ValidateAll() if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_GenderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_GenderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_GenderMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayload_GenderValidationError is the validation
// error returned by IDnowFraudSuspicionConfirmedPayload_Gender.Validate if
// the designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_GenderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_GenderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_GenderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_GenderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_GenderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_GenderValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_GenderValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_GenderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Gender.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_GenderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_GenderValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Identlanguage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Identlanguage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Identlanguage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_IdentlanguageMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Identlanguage) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Identlanguage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_IdentlanguageMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_IdentlanguageMultiError is an error
// wrapping multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Identlanguage.ValidateAll() if the
// designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_IdentlanguageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_IdentlanguageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_IdentlanguageMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayload_IdentlanguageValidationError is the
// validation error returned by
// IDnowFraudSuspicionConfirmedPayload_Identlanguage.Validate if the
// designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_IdentlanguageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_IdentlanguageValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_IdentlanguageValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_IdentlanguageValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_IdentlanguageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_IdentlanguageValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_IdentlanguageValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_IdentlanguageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Identlanguage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_IdentlanguageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_IdentlanguageValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Lastname with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Lastname) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Lastname with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_LastnameMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Lastname) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Lastname) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_LastnameMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_LastnameMultiError is an error wrapping
// multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Lastname.ValidateAll() if the
// designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_LastnameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_LastnameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_LastnameMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayload_LastnameValidationError is the
// validation error returned by
// IDnowFraudSuspicionConfirmedPayload_Lastname.Validate if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_LastnameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_LastnameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_LastnameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_LastnameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_LastnameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_LastnameValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_LastnameValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_LastnameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Lastname.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_LastnameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_LastnameValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Userdata with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Userdata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Userdata with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_UserdataMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Userdata) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Userdata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBirthday()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
					field:  "Birthday",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
					field:  "Birthday",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBirthday()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
				field:  "Birthday",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFirstname()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
					field:  "Firstname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
					field:  "Firstname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFirstname()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
				field:  "Firstname",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBirthplace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
					field:  "Birthplace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
					field:  "Birthplace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBirthplace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
				field:  "Birthplace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNationality()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
					field:  "Nationality",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
					field:  "Nationality",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNationality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
				field:  "Nationality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGender()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
					field:  "Gender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
					field:  "Gender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGender()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
				field:  "Gender",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIdentlanguage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
					field:  "Identlanguage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
					field:  "Identlanguage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentlanguage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
				field:  "Identlanguage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastname()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
					field:  "Lastname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
					field:  "Lastname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastname()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{
				field:  "Lastname",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_UserdataMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_UserdataMultiError is an error wrapping
// multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Userdata.ValidateAll() if the
// designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_UserdataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_UserdataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_UserdataMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayload_UserdataValidationError is the
// validation error returned by
// IDnowFraudSuspicionConfirmedPayload_Userdata.Validate if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_UserdataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_UserdataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_UserdataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_UserdataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_UserdataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_UserdataValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_UserdataValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_UserdataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Userdata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_UserdataValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Country1 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Country1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Country1 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_Country1MultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Country1) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Country1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_Country1MultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_Country1MultiError is an error wrapping
// multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Country1.ValidateAll() if the
// designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_Country1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_Country1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_Country1MultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayload_Country1ValidationError is the
// validation error returned by
// IDnowFraudSuspicionConfirmedPayload_Country1.Validate if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_Country1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_Country1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_Country1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_Country1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_Country1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_Country1ValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_Country1ValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_Country1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Country1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_Country1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_Country1ValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Number with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Number) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Number with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_NumberMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Number) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Number) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_NumberMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_NumberMultiError is an error wrapping
// multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Number.ValidateAll() if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_NumberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_NumberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_NumberMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayload_NumberValidationError is the validation
// error returned by IDnowFraudSuspicionConfirmedPayload_Number.Validate if
// the designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_NumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_NumberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_NumberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_NumberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_NumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_NumberValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_NumberValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_NumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Number.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_NumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_NumberValidationError{}

// Validate checks the field values on IDnowFraudSuspicionConfirmedPayload_Type
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Type) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Type with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_TypeMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Type) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Type) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_TypeMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_TypeMultiError is an error wrapping
// multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Type.ValidateAll() if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_TypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_TypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_TypeMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayload_TypeValidationError is the validation
// error returned by IDnowFraudSuspicionConfirmedPayload_Type.Validate if the
// designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_TypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_TypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_TypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_TypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_TypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_TypeValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_TypeValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_TypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Type.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_TypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_TypeValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Validuntil with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Validuntil) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Validuntil with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_ValiduntilMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Validuntil) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Validuntil) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_ValiduntilMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_ValiduntilMultiError is an error
// wrapping multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Validuntil.ValidateAll() if the
// designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_ValiduntilMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_ValiduntilMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_ValiduntilMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayload_ValiduntilValidationError is the
// validation error returned by
// IDnowFraudSuspicionConfirmedPayload_Validuntil.Validate if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_ValiduntilValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_ValiduntilValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_ValiduntilValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_ValiduntilValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_ValiduntilValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_ValiduntilValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_ValiduntilValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_ValiduntilValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Validuntil.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_ValiduntilValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_ValiduntilValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Identificationdocument with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Identificationdocument) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Identificationdocument with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentMultiError, or
// nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Identificationdocument) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Identificationdocument) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCountry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCountry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError{
				field:  "Country",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNumber()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError{
					field:  "Number",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError{
					field:  "Number",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError{
				field:  "Number",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValiduntil()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError{
					field:  "Validuntil",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError{
					field:  "Validuntil",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValiduntil()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError{
				field:  "Validuntil",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDriverlicenses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError{
						field:  fmt.Sprintf("Driverlicenses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError{
						field:  fmt.Sprintf("Driverlicenses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError{
					field:  fmt.Sprintf("Driverlicenses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentMultiError is an
// error wrapping multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Identificationdocument.ValidateAll() if
// the designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentMultiError) AllErrors() []error {
	return m
}

// IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError is
// the validation error returned by
// IDnowFraudSuspicionConfirmedPayload_Identificationdocument.Validate if the
// designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Identificationdocument.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_IdentificationdocumentValidationError{}

// Validate checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Attachments with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowFraudSuspicionConfirmedPayload_Attachments) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowFraudSuspicionConfirmedPayload_Attachments with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayload_AttachmentsMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload_Attachments) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload_Attachments) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pdf

	// no validation rules for Xml

	// no validation rules for Idbackside

	// no validation rules for Idfrontside

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayload_AttachmentsMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayload_AttachmentsMultiError is an error
// wrapping multiple validation errors returned by
// IDnowFraudSuspicionConfirmedPayload_Attachments.ValidateAll() if the
// designated constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_AttachmentsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayload_AttachmentsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayload_AttachmentsMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayload_AttachmentsValidationError is the
// validation error returned by
// IDnowFraudSuspicionConfirmedPayload_Attachments.Validate if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayload_AttachmentsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayload_AttachmentsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayload_AttachmentsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayload_AttachmentsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayload_AttachmentsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayload_AttachmentsValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayload_AttachmentsValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayload_AttachmentsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload_Attachments.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayload_AttachmentsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayload_AttachmentsValidationError{}

// Validate checks the field values on
// IDnowCanceledPayload_Identificationprocess with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowCanceledPayload_Identificationprocess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowCanceledPayload_Identificationprocess with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowCanceledPayload_IdentificationprocessMultiError, or nil if none found.
func (m *IDnowCanceledPayload_Identificationprocess) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Identificationprocess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Reason

	// no validation rules for Companyid

	// no validation rules for Filename

	if all {
		switch v := interface{}(m.GetIdentificationtime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_IdentificationprocessValidationError{
					field:  "Identificationtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_IdentificationprocessValidationError{
					field:  "Identificationtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentificationtime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_IdentificationprocessValidationError{
				field:  "Identificationtime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	// no validation rules for Href

	// no validation rules for Type

	// no validation rules for Transactionnumber

	if len(errors) > 0 {
		return IDnowCanceledPayload_IdentificationprocessMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_IdentificationprocessMultiError is an error wrapping
// multiple validation errors returned by
// IDnowCanceledPayload_Identificationprocess.ValidateAll() if the designated
// constraints aren't met.
type IDnowCanceledPayload_IdentificationprocessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_IdentificationprocessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_IdentificationprocessMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_IdentificationprocessValidationError is the validation
// error returned by IDnowCanceledPayload_Identificationprocess.Validate if
// the designated constraints aren't met.
type IDnowCanceledPayload_IdentificationprocessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_IdentificationprocessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_IdentificationprocessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_IdentificationprocessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_IdentificationprocessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_IdentificationprocessValidationError) ErrorName() string {
	return "IDnowCanceledPayload_IdentificationprocessValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_IdentificationprocessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Identificationprocess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_IdentificationprocessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_IdentificationprocessValidationError{}

// Validate checks the field values on IDnowCanceledPayload_Customdata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowCanceledPayload_Customdata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload_Customdata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayload_CustomdataMultiError, or nil if none found.
func (m *IDnowCanceledPayload_Customdata) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Customdata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCustom3()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_CustomdataValidationError{
					field:  "Custom3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_CustomdataValidationError{
					field:  "Custom3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom3()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_CustomdataValidationError{
				field:  "Custom3",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom4()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_CustomdataValidationError{
					field:  "Custom4",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_CustomdataValidationError{
					field:  "Custom4",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom4()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_CustomdataValidationError{
				field:  "Custom4",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_CustomdataValidationError{
					field:  "Custom1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_CustomdataValidationError{
					field:  "Custom1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_CustomdataValidationError{
				field:  "Custom1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_CustomdataValidationError{
					field:  "Custom2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_CustomdataValidationError{
					field:  "Custom2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_CustomdataValidationError{
				field:  "Custom2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom5()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_CustomdataValidationError{
					field:  "Custom5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_CustomdataValidationError{
					field:  "Custom5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom5()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_CustomdataValidationError{
				field:  "Custom5",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowCanceledPayload_CustomdataMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_CustomdataMultiError is an error wrapping multiple
// validation errors returned by IDnowCanceledPayload_Customdata.ValidateAll()
// if the designated constraints aren't met.
type IDnowCanceledPayload_CustomdataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_CustomdataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_CustomdataMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_CustomdataValidationError is the validation error
// returned by IDnowCanceledPayload_Customdata.Validate if the designated
// constraints aren't met.
type IDnowCanceledPayload_CustomdataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_CustomdataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_CustomdataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_CustomdataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_CustomdataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_CustomdataValidationError) ErrorName() string {
	return "IDnowCanceledPayload_CustomdataValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_CustomdataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Customdata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_CustomdataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_CustomdataValidationError{}

// Validate checks the field values on IDnowCanceledPayload_Contactdata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowCanceledPayload_Contactdata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload_Contactdata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayload_ContactdataMultiError, or nil if none found.
func (m *IDnowCanceledPayload_Contactdata) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Contactdata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mobilephone

	// no validation rules for Email

	if len(errors) > 0 {
		return IDnowCanceledPayload_ContactdataMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_ContactdataMultiError is an error wrapping multiple
// validation errors returned by
// IDnowCanceledPayload_Contactdata.ValidateAll() if the designated
// constraints aren't met.
type IDnowCanceledPayload_ContactdataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_ContactdataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_ContactdataMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_ContactdataValidationError is the validation error
// returned by IDnowCanceledPayload_Contactdata.Validate if the designated
// constraints aren't met.
type IDnowCanceledPayload_ContactdataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_ContactdataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_ContactdataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_ContactdataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_ContactdataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_ContactdataValidationError) ErrorName() string {
	return "IDnowCanceledPayload_ContactdataValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_ContactdataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Contactdata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_ContactdataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_ContactdataValidationError{}

// Validate checks the field values on IDnowCanceledPayload_Birthday with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowCanceledPayload_Birthday) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload_Birthday with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayload_BirthdayMultiError, or nil if none found.
func (m *IDnowCanceledPayload_Birthday) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Birthday) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	// no validation rules for Original

	if len(errors) > 0 {
		return IDnowCanceledPayload_BirthdayMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_BirthdayMultiError is an error wrapping multiple
// validation errors returned by IDnowCanceledPayload_Birthday.ValidateAll()
// if the designated constraints aren't met.
type IDnowCanceledPayload_BirthdayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_BirthdayMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_BirthdayMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_BirthdayValidationError is the validation error
// returned by IDnowCanceledPayload_Birthday.Validate if the designated
// constraints aren't met.
type IDnowCanceledPayload_BirthdayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_BirthdayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_BirthdayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_BirthdayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_BirthdayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_BirthdayValidationError) ErrorName() string {
	return "IDnowCanceledPayload_BirthdayValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_BirthdayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Birthday.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_BirthdayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_BirthdayValidationError{}

// Validate checks the field values on IDnowCanceledPayload_Firstname with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowCanceledPayload_Firstname) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload_Firstname with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayload_FirstnameMultiError, or nil if none found.
func (m *IDnowCanceledPayload_Firstname) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Firstname) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowCanceledPayload_FirstnameMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_FirstnameMultiError is an error wrapping multiple
// validation errors returned by IDnowCanceledPayload_Firstname.ValidateAll()
// if the designated constraints aren't met.
type IDnowCanceledPayload_FirstnameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_FirstnameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_FirstnameMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_FirstnameValidationError is the validation error
// returned by IDnowCanceledPayload_Firstname.Validate if the designated
// constraints aren't met.
type IDnowCanceledPayload_FirstnameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_FirstnameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_FirstnameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_FirstnameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_FirstnameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_FirstnameValidationError) ErrorName() string {
	return "IDnowCanceledPayload_FirstnameValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_FirstnameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Firstname.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_FirstnameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_FirstnameValidationError{}

// Validate checks the field values on IDnowCanceledPayload_Zipcode with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowCanceledPayload_Zipcode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload_Zipcode with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayload_ZipcodeMultiError, or nil if none found.
func (m *IDnowCanceledPayload_Zipcode) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Zipcode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowCanceledPayload_ZipcodeMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_ZipcodeMultiError is an error wrapping multiple
// validation errors returned by IDnowCanceledPayload_Zipcode.ValidateAll() if
// the designated constraints aren't met.
type IDnowCanceledPayload_ZipcodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_ZipcodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_ZipcodeMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_ZipcodeValidationError is the validation error returned
// by IDnowCanceledPayload_Zipcode.Validate if the designated constraints
// aren't met.
type IDnowCanceledPayload_ZipcodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_ZipcodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_ZipcodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_ZipcodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_ZipcodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_ZipcodeValidationError) ErrorName() string {
	return "IDnowCanceledPayload_ZipcodeValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_ZipcodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Zipcode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_ZipcodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_ZipcodeValidationError{}

// Validate checks the field values on IDnowCanceledPayload_Country with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowCanceledPayload_Country) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload_Country with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayload_CountryMultiError, or nil if none found.
func (m *IDnowCanceledPayload_Country) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Country) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowCanceledPayload_CountryMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_CountryMultiError is an error wrapping multiple
// validation errors returned by IDnowCanceledPayload_Country.ValidateAll() if
// the designated constraints aren't met.
type IDnowCanceledPayload_CountryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_CountryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_CountryMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_CountryValidationError is the validation error returned
// by IDnowCanceledPayload_Country.Validate if the designated constraints
// aren't met.
type IDnowCanceledPayload_CountryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_CountryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_CountryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_CountryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_CountryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_CountryValidationError) ErrorName() string {
	return "IDnowCanceledPayload_CountryValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_CountryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Country.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_CountryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_CountryValidationError{}

// Validate checks the field values on IDnowCanceledPayload_City with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowCanceledPayload_City) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload_City with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayload_CityMultiError, or nil if none found.
func (m *IDnowCanceledPayload_City) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_City) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowCanceledPayload_CityMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_CityMultiError is an error wrapping multiple validation
// errors returned by IDnowCanceledPayload_City.ValidateAll() if the
// designated constraints aren't met.
type IDnowCanceledPayload_CityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_CityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_CityMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_CityValidationError is the validation error returned by
// IDnowCanceledPayload_City.Validate if the designated constraints aren't met.
type IDnowCanceledPayload_CityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_CityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_CityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_CityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_CityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_CityValidationError) ErrorName() string {
	return "IDnowCanceledPayload_CityValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_CityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_City.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_CityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_CityValidationError{}

// Validate checks the field values on IDnowCanceledPayload_Street with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowCanceledPayload_Street) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload_Street with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayload_StreetMultiError, or nil if none found.
func (m *IDnowCanceledPayload_Street) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Street) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	// no validation rules for Original

	if len(errors) > 0 {
		return IDnowCanceledPayload_StreetMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_StreetMultiError is an error wrapping multiple
// validation errors returned by IDnowCanceledPayload_Street.ValidateAll() if
// the designated constraints aren't met.
type IDnowCanceledPayload_StreetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_StreetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_StreetMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_StreetValidationError is the validation error returned
// by IDnowCanceledPayload_Street.Validate if the designated constraints
// aren't met.
type IDnowCanceledPayload_StreetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_StreetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_StreetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_StreetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_StreetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_StreetValidationError) ErrorName() string {
	return "IDnowCanceledPayload_StreetValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_StreetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Street.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_StreetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_StreetValidationError{}

// Validate checks the field values on IDnowCanceledPayload_Streetnumber with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowCanceledPayload_Streetnumber) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload_Streetnumber
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayload_StreetnumberMultiError, or nil if none found.
func (m *IDnowCanceledPayload_Streetnumber) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Streetnumber) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowCanceledPayload_StreetnumberMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_StreetnumberMultiError is an error wrapping multiple
// validation errors returned by
// IDnowCanceledPayload_Streetnumber.ValidateAll() if the designated
// constraints aren't met.
type IDnowCanceledPayload_StreetnumberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_StreetnumberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_StreetnumberMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_StreetnumberValidationError is the validation error
// returned by IDnowCanceledPayload_Streetnumber.Validate if the designated
// constraints aren't met.
type IDnowCanceledPayload_StreetnumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_StreetnumberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_StreetnumberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_StreetnumberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_StreetnumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_StreetnumberValidationError) ErrorName() string {
	return "IDnowCanceledPayload_StreetnumberValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_StreetnumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Streetnumber.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_StreetnumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_StreetnumberValidationError{}

// Validate checks the field values on IDnowCanceledPayload_Address with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowCanceledPayload_Address) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload_Address with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayload_AddressMultiError, or nil if none found.
func (m *IDnowCanceledPayload_Address) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Address) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetZipcode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_AddressValidationError{
					field:  "Zipcode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_AddressValidationError{
					field:  "Zipcode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetZipcode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_AddressValidationError{
				field:  "Zipcode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCountry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_AddressValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_AddressValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCountry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_AddressValidationError{
				field:  "Country",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_AddressValidationError{
					field:  "City",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_AddressValidationError{
					field:  "City",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_AddressValidationError{
				field:  "City",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStreet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_AddressValidationError{
					field:  "Street",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_AddressValidationError{
					field:  "Street",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStreet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_AddressValidationError{
				field:  "Street",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStreetnumber()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_AddressValidationError{
					field:  "Streetnumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_AddressValidationError{
					field:  "Streetnumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStreetnumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_AddressValidationError{
				field:  "Streetnumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowCanceledPayload_AddressMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_AddressMultiError is an error wrapping multiple
// validation errors returned by IDnowCanceledPayload_Address.ValidateAll() if
// the designated constraints aren't met.
type IDnowCanceledPayload_AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_AddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_AddressMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_AddressValidationError is the validation error returned
// by IDnowCanceledPayload_Address.Validate if the designated constraints
// aren't met.
type IDnowCanceledPayload_AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_AddressValidationError) ErrorName() string {
	return "IDnowCanceledPayload_AddressValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Address.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_AddressValidationError{}

// Validate checks the field values on IDnowCanceledPayload_Birthplace with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowCanceledPayload_Birthplace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload_Birthplace with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayload_BirthplaceMultiError, or nil if none found.
func (m *IDnowCanceledPayload_Birthplace) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Birthplace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	// no validation rules for Original

	if len(errors) > 0 {
		return IDnowCanceledPayload_BirthplaceMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_BirthplaceMultiError is an error wrapping multiple
// validation errors returned by IDnowCanceledPayload_Birthplace.ValidateAll()
// if the designated constraints aren't met.
type IDnowCanceledPayload_BirthplaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_BirthplaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_BirthplaceMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_BirthplaceValidationError is the validation error
// returned by IDnowCanceledPayload_Birthplace.Validate if the designated
// constraints aren't met.
type IDnowCanceledPayload_BirthplaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_BirthplaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_BirthplaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_BirthplaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_BirthplaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_BirthplaceValidationError) ErrorName() string {
	return "IDnowCanceledPayload_BirthplaceValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_BirthplaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Birthplace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_BirthplaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_BirthplaceValidationError{}

// Validate checks the field values on IDnowCanceledPayload_Nationality with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowCanceledPayload_Nationality) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload_Nationality with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayload_NationalityMultiError, or nil if none found.
func (m *IDnowCanceledPayload_Nationality) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Nationality) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowCanceledPayload_NationalityMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_NationalityMultiError is an error wrapping multiple
// validation errors returned by
// IDnowCanceledPayload_Nationality.ValidateAll() if the designated
// constraints aren't met.
type IDnowCanceledPayload_NationalityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_NationalityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_NationalityMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_NationalityValidationError is the validation error
// returned by IDnowCanceledPayload_Nationality.Validate if the designated
// constraints aren't met.
type IDnowCanceledPayload_NationalityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_NationalityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_NationalityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_NationalityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_NationalityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_NationalityValidationError) ErrorName() string {
	return "IDnowCanceledPayload_NationalityValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_NationalityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Nationality.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_NationalityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_NationalityValidationError{}

// Validate checks the field values on IDnowCanceledPayload_Gender with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowCanceledPayload_Gender) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload_Gender with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayload_GenderMultiError, or nil if none found.
func (m *IDnowCanceledPayload_Gender) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Gender) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowCanceledPayload_GenderMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_GenderMultiError is an error wrapping multiple
// validation errors returned by IDnowCanceledPayload_Gender.ValidateAll() if
// the designated constraints aren't met.
type IDnowCanceledPayload_GenderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_GenderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_GenderMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_GenderValidationError is the validation error returned
// by IDnowCanceledPayload_Gender.Validate if the designated constraints
// aren't met.
type IDnowCanceledPayload_GenderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_GenderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_GenderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_GenderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_GenderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_GenderValidationError) ErrorName() string {
	return "IDnowCanceledPayload_GenderValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_GenderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Gender.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_GenderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_GenderValidationError{}

// Validate checks the field values on IDnowCanceledPayload_Identlanguage with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowCanceledPayload_Identlanguage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload_Identlanguage
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayload_IdentlanguageMultiError, or nil if none found.
func (m *IDnowCanceledPayload_Identlanguage) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Identlanguage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowCanceledPayload_IdentlanguageMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_IdentlanguageMultiError is an error wrapping multiple
// validation errors returned by
// IDnowCanceledPayload_Identlanguage.ValidateAll() if the designated
// constraints aren't met.
type IDnowCanceledPayload_IdentlanguageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_IdentlanguageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_IdentlanguageMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_IdentlanguageValidationError is the validation error
// returned by IDnowCanceledPayload_Identlanguage.Validate if the designated
// constraints aren't met.
type IDnowCanceledPayload_IdentlanguageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_IdentlanguageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_IdentlanguageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_IdentlanguageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_IdentlanguageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_IdentlanguageValidationError) ErrorName() string {
	return "IDnowCanceledPayload_IdentlanguageValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_IdentlanguageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Identlanguage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_IdentlanguageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_IdentlanguageValidationError{}

// Validate checks the field values on IDnowCanceledPayload_Lastname with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowCanceledPayload_Lastname) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload_Lastname with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayload_LastnameMultiError, or nil if none found.
func (m *IDnowCanceledPayload_Lastname) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Lastname) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowCanceledPayload_LastnameMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_LastnameMultiError is an error wrapping multiple
// validation errors returned by IDnowCanceledPayload_Lastname.ValidateAll()
// if the designated constraints aren't met.
type IDnowCanceledPayload_LastnameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_LastnameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_LastnameMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_LastnameValidationError is the validation error
// returned by IDnowCanceledPayload_Lastname.Validate if the designated
// constraints aren't met.
type IDnowCanceledPayload_LastnameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_LastnameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_LastnameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_LastnameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_LastnameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_LastnameValidationError) ErrorName() string {
	return "IDnowCanceledPayload_LastnameValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_LastnameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Lastname.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_LastnameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_LastnameValidationError{}

// Validate checks the field values on IDnowCanceledPayload_Userdata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowCanceledPayload_Userdata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload_Userdata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayload_UserdataMultiError, or nil if none found.
func (m *IDnowCanceledPayload_Userdata) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Userdata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBirthday()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_UserdataValidationError{
					field:  "Birthday",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_UserdataValidationError{
					field:  "Birthday",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBirthday()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_UserdataValidationError{
				field:  "Birthday",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFirstname()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_UserdataValidationError{
					field:  "Firstname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_UserdataValidationError{
					field:  "Firstname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFirstname()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_UserdataValidationError{
				field:  "Firstname",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_UserdataValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_UserdataValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_UserdataValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBirthplace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_UserdataValidationError{
					field:  "Birthplace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_UserdataValidationError{
					field:  "Birthplace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBirthplace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_UserdataValidationError{
				field:  "Birthplace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNationality()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_UserdataValidationError{
					field:  "Nationality",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_UserdataValidationError{
					field:  "Nationality",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNationality()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_UserdataValidationError{
				field:  "Nationality",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGender()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_UserdataValidationError{
					field:  "Gender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_UserdataValidationError{
					field:  "Gender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGender()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_UserdataValidationError{
				field:  "Gender",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIdentlanguage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_UserdataValidationError{
					field:  "Identlanguage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_UserdataValidationError{
					field:  "Identlanguage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentlanguage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_UserdataValidationError{
				field:  "Identlanguage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastname()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_UserdataValidationError{
					field:  "Lastname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_UserdataValidationError{
					field:  "Lastname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastname()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_UserdataValidationError{
				field:  "Lastname",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowCanceledPayload_UserdataMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_UserdataMultiError is an error wrapping multiple
// validation errors returned by IDnowCanceledPayload_Userdata.ValidateAll()
// if the designated constraints aren't met.
type IDnowCanceledPayload_UserdataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_UserdataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_UserdataMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_UserdataValidationError is the validation error
// returned by IDnowCanceledPayload_Userdata.Validate if the designated
// constraints aren't met.
type IDnowCanceledPayload_UserdataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_UserdataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_UserdataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_UserdataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_UserdataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_UserdataValidationError) ErrorName() string {
	return "IDnowCanceledPayload_UserdataValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_UserdataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Userdata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_UserdataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_UserdataValidationError{}

// Validate checks the field values on IDnowCanceledPayload_Country1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowCanceledPayload_Country1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload_Country1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayload_Country1MultiError, or nil if none found.
func (m *IDnowCanceledPayload_Country1) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Country1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowCanceledPayload_Country1MultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_Country1MultiError is an error wrapping multiple
// validation errors returned by IDnowCanceledPayload_Country1.ValidateAll()
// if the designated constraints aren't met.
type IDnowCanceledPayload_Country1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_Country1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_Country1MultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_Country1ValidationError is the validation error
// returned by IDnowCanceledPayload_Country1.Validate if the designated
// constraints aren't met.
type IDnowCanceledPayload_Country1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_Country1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_Country1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_Country1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_Country1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_Country1ValidationError) ErrorName() string {
	return "IDnowCanceledPayload_Country1ValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_Country1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Country1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_Country1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_Country1ValidationError{}

// Validate checks the field values on IDnowCanceledPayload_Number with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowCanceledPayload_Number) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload_Number with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayload_NumberMultiError, or nil if none found.
func (m *IDnowCanceledPayload_Number) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Number) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowCanceledPayload_NumberMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_NumberMultiError is an error wrapping multiple
// validation errors returned by IDnowCanceledPayload_Number.ValidateAll() if
// the designated constraints aren't met.
type IDnowCanceledPayload_NumberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_NumberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_NumberMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_NumberValidationError is the validation error returned
// by IDnowCanceledPayload_Number.Validate if the designated constraints
// aren't met.
type IDnowCanceledPayload_NumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_NumberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_NumberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_NumberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_NumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_NumberValidationError) ErrorName() string {
	return "IDnowCanceledPayload_NumberValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_NumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Number.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_NumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_NumberValidationError{}

// Validate checks the field values on IDnowCanceledPayload_Type with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowCanceledPayload_Type) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload_Type with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayload_TypeMultiError, or nil if none found.
func (m *IDnowCanceledPayload_Type) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Type) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowCanceledPayload_TypeMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_TypeMultiError is an error wrapping multiple validation
// errors returned by IDnowCanceledPayload_Type.ValidateAll() if the
// designated constraints aren't met.
type IDnowCanceledPayload_TypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_TypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_TypeMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_TypeValidationError is the validation error returned by
// IDnowCanceledPayload_Type.Validate if the designated constraints aren't met.
type IDnowCanceledPayload_TypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_TypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_TypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_TypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_TypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_TypeValidationError) ErrorName() string {
	return "IDnowCanceledPayload_TypeValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_TypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Type.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_TypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_TypeValidationError{}

// Validate checks the field values on IDnowCanceledPayload_Validuntil with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowCanceledPayload_Validuntil) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload_Validuntil with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayload_ValiduntilMultiError, or nil if none found.
func (m *IDnowCanceledPayload_Validuntil) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Validuntil) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowCanceledPayload_ValiduntilMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_ValiduntilMultiError is an error wrapping multiple
// validation errors returned by IDnowCanceledPayload_Validuntil.ValidateAll()
// if the designated constraints aren't met.
type IDnowCanceledPayload_ValiduntilMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_ValiduntilMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_ValiduntilMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_ValiduntilValidationError is the validation error
// returned by IDnowCanceledPayload_Validuntil.Validate if the designated
// constraints aren't met.
type IDnowCanceledPayload_ValiduntilValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_ValiduntilValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_ValiduntilValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_ValiduntilValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_ValiduntilValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_ValiduntilValidationError) ErrorName() string {
	return "IDnowCanceledPayload_ValiduntilValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_ValiduntilValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Validuntil.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_ValiduntilValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_ValiduntilValidationError{}

// Validate checks the field values on
// IDnowCanceledPayload_Identificationdocument with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowCanceledPayload_Identificationdocument) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowCanceledPayload_Identificationdocument with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowCanceledPayload_IdentificationdocumentMultiError, or nil if none found.
func (m *IDnowCanceledPayload_Identificationdocument) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Identificationdocument) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCountry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_IdentificationdocumentValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_IdentificationdocumentValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCountry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_IdentificationdocumentValidationError{
				field:  "Country",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNumber()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_IdentificationdocumentValidationError{
					field:  "Number",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_IdentificationdocumentValidationError{
					field:  "Number",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_IdentificationdocumentValidationError{
				field:  "Number",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_IdentificationdocumentValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_IdentificationdocumentValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_IdentificationdocumentValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValiduntil()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayload_IdentificationdocumentValidationError{
					field:  "Validuntil",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayload_IdentificationdocumentValidationError{
					field:  "Validuntil",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValiduntil()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayload_IdentificationdocumentValidationError{
				field:  "Validuntil",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDriverlicenses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IDnowCanceledPayload_IdentificationdocumentValidationError{
						field:  fmt.Sprintf("Driverlicenses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IDnowCanceledPayload_IdentificationdocumentValidationError{
						field:  fmt.Sprintf("Driverlicenses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IDnowCanceledPayload_IdentificationdocumentValidationError{
					field:  fmt.Sprintf("Driverlicenses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IDnowCanceledPayload_IdentificationdocumentMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_IdentificationdocumentMultiError is an error wrapping
// multiple validation errors returned by
// IDnowCanceledPayload_Identificationdocument.ValidateAll() if the designated
// constraints aren't met.
type IDnowCanceledPayload_IdentificationdocumentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_IdentificationdocumentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_IdentificationdocumentMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_IdentificationdocumentValidationError is the validation
// error returned by IDnowCanceledPayload_Identificationdocument.Validate if
// the designated constraints aren't met.
type IDnowCanceledPayload_IdentificationdocumentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_IdentificationdocumentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_IdentificationdocumentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_IdentificationdocumentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_IdentificationdocumentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_IdentificationdocumentValidationError) ErrorName() string {
	return "IDnowCanceledPayload_IdentificationdocumentValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_IdentificationdocumentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Identificationdocument.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_IdentificationdocumentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_IdentificationdocumentValidationError{}

// Validate checks the field values on IDnowCanceledPayload_Attachments with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowCanceledPayload_Attachments) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload_Attachments with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayload_AttachmentsMultiError, or nil if none found.
func (m *IDnowCanceledPayload_Attachments) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload_Attachments) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pdf

	// no validation rules for Xml

	if len(errors) > 0 {
		return IDnowCanceledPayload_AttachmentsMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayload_AttachmentsMultiError is an error wrapping multiple
// validation errors returned by
// IDnowCanceledPayload_Attachments.ValidateAll() if the designated
// constraints aren't met.
type IDnowCanceledPayload_AttachmentsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayload_AttachmentsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayload_AttachmentsMultiError) AllErrors() []error { return m }

// IDnowCanceledPayload_AttachmentsValidationError is the validation error
// returned by IDnowCanceledPayload_Attachments.Validate if the designated
// constraints aren't met.
type IDnowCanceledPayload_AttachmentsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayload_AttachmentsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayload_AttachmentsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayload_AttachmentsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayload_AttachmentsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayload_AttachmentsValidationError) ErrorName() string {
	return "IDnowCanceledPayload_AttachmentsValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayload_AttachmentsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload_Attachments.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayload_AttachmentsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayload_AttachmentsValidationError{}

// Validate checks the field values on
// IDnowAbortedPayload_Identificationprocess with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowAbortedPayload_Identificationprocess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowAbortedPayload_Identificationprocess with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowAbortedPayload_IdentificationprocessMultiError, or nil if none found.
func (m *IDnowAbortedPayload_Identificationprocess) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowAbortedPayload_Identificationprocess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Reason

	// no validation rules for Companyid

	// no validation rules for Filename

	if all {
		switch v := interface{}(m.GetIdentificationtime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayload_IdentificationprocessValidationError{
					field:  "Identificationtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayload_IdentificationprocessValidationError{
					field:  "Identificationtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentificationtime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayload_IdentificationprocessValidationError{
				field:  "Identificationtime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	// no validation rules for Href

	// no validation rules for Type

	// no validation rules for Transactionnumber

	if len(errors) > 0 {
		return IDnowAbortedPayload_IdentificationprocessMultiError(errors)
	}

	return nil
}

// IDnowAbortedPayload_IdentificationprocessMultiError is an error wrapping
// multiple validation errors returned by
// IDnowAbortedPayload_Identificationprocess.ValidateAll() if the designated
// constraints aren't met.
type IDnowAbortedPayload_IdentificationprocessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowAbortedPayload_IdentificationprocessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowAbortedPayload_IdentificationprocessMultiError) AllErrors() []error { return m }

// IDnowAbortedPayload_IdentificationprocessValidationError is the validation
// error returned by IDnowAbortedPayload_Identificationprocess.Validate if the
// designated constraints aren't met.
type IDnowAbortedPayload_IdentificationprocessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowAbortedPayload_IdentificationprocessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowAbortedPayload_IdentificationprocessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowAbortedPayload_IdentificationprocessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowAbortedPayload_IdentificationprocessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowAbortedPayload_IdentificationprocessValidationError) ErrorName() string {
	return "IDnowAbortedPayload_IdentificationprocessValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowAbortedPayload_IdentificationprocessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowAbortedPayload_Identificationprocess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowAbortedPayload_IdentificationprocessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowAbortedPayload_IdentificationprocessValidationError{}

// Validate checks the field values on IDnowAbortedPayload_Customdata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowAbortedPayload_Customdata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowAbortedPayload_Customdata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowAbortedPayload_CustomdataMultiError, or nil if none found.
func (m *IDnowAbortedPayload_Customdata) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowAbortedPayload_Customdata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCustom3()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayload_CustomdataValidationError{
					field:  "Custom3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayload_CustomdataValidationError{
					field:  "Custom3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom3()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayload_CustomdataValidationError{
				field:  "Custom3",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom4()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayload_CustomdataValidationError{
					field:  "Custom4",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayload_CustomdataValidationError{
					field:  "Custom4",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom4()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayload_CustomdataValidationError{
				field:  "Custom4",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayload_CustomdataValidationError{
					field:  "Custom1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayload_CustomdataValidationError{
					field:  "Custom1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayload_CustomdataValidationError{
				field:  "Custom1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayload_CustomdataValidationError{
					field:  "Custom2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayload_CustomdataValidationError{
					field:  "Custom2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayload_CustomdataValidationError{
				field:  "Custom2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom5()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayload_CustomdataValidationError{
					field:  "Custom5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayload_CustomdataValidationError{
					field:  "Custom5",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom5()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayload_CustomdataValidationError{
				field:  "Custom5",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowAbortedPayload_CustomdataMultiError(errors)
	}

	return nil
}

// IDnowAbortedPayload_CustomdataMultiError is an error wrapping multiple
// validation errors returned by IDnowAbortedPayload_Customdata.ValidateAll()
// if the designated constraints aren't met.
type IDnowAbortedPayload_CustomdataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowAbortedPayload_CustomdataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowAbortedPayload_CustomdataMultiError) AllErrors() []error { return m }

// IDnowAbortedPayload_CustomdataValidationError is the validation error
// returned by IDnowAbortedPayload_Customdata.Validate if the designated
// constraints aren't met.
type IDnowAbortedPayload_CustomdataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowAbortedPayload_CustomdataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowAbortedPayload_CustomdataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowAbortedPayload_CustomdataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowAbortedPayload_CustomdataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowAbortedPayload_CustomdataValidationError) ErrorName() string {
	return "IDnowAbortedPayload_CustomdataValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowAbortedPayload_CustomdataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowAbortedPayload_Customdata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowAbortedPayload_CustomdataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowAbortedPayload_CustomdataValidationError{}

// Validate checks the field values on IDnowAbortedPayload_Contactdata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowAbortedPayload_Contactdata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowAbortedPayload_Contactdata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowAbortedPayload_ContactdataMultiError, or nil if none found.
func (m *IDnowAbortedPayload_Contactdata) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowAbortedPayload_Contactdata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMobilephone()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayload_ContactdataValidationError{
					field:  "Mobilephone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayload_ContactdataValidationError{
					field:  "Mobilephone",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMobilephone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayload_ContactdataValidationError{
				field:  "Mobilephone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEmail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayload_ContactdataValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayload_ContactdataValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayload_ContactdataValidationError{
				field:  "Email",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowAbortedPayload_ContactdataMultiError(errors)
	}

	return nil
}

// IDnowAbortedPayload_ContactdataMultiError is an error wrapping multiple
// validation errors returned by IDnowAbortedPayload_Contactdata.ValidateAll()
// if the designated constraints aren't met.
type IDnowAbortedPayload_ContactdataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowAbortedPayload_ContactdataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowAbortedPayload_ContactdataMultiError) AllErrors() []error { return m }

// IDnowAbortedPayload_ContactdataValidationError is the validation error
// returned by IDnowAbortedPayload_Contactdata.Validate if the designated
// constraints aren't met.
type IDnowAbortedPayload_ContactdataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowAbortedPayload_ContactdataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowAbortedPayload_ContactdataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowAbortedPayload_ContactdataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowAbortedPayload_ContactdataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowAbortedPayload_ContactdataValidationError) ErrorName() string {
	return "IDnowAbortedPayload_ContactdataValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowAbortedPayload_ContactdataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowAbortedPayload_Contactdata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowAbortedPayload_ContactdataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowAbortedPayload_ContactdataValidationError{}

// Validate checks the field values on IDnowAbortedPayload_Firstname with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowAbortedPayload_Firstname) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowAbortedPayload_Firstname with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowAbortedPayload_FirstnameMultiError, or nil if none found.
func (m *IDnowAbortedPayload_Firstname) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowAbortedPayload_Firstname) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowAbortedPayload_FirstnameMultiError(errors)
	}

	return nil
}

// IDnowAbortedPayload_FirstnameMultiError is an error wrapping multiple
// validation errors returned by IDnowAbortedPayload_Firstname.ValidateAll()
// if the designated constraints aren't met.
type IDnowAbortedPayload_FirstnameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowAbortedPayload_FirstnameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowAbortedPayload_FirstnameMultiError) AllErrors() []error { return m }

// IDnowAbortedPayload_FirstnameValidationError is the validation error
// returned by IDnowAbortedPayload_Firstname.Validate if the designated
// constraints aren't met.
type IDnowAbortedPayload_FirstnameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowAbortedPayload_FirstnameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowAbortedPayload_FirstnameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowAbortedPayload_FirstnameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowAbortedPayload_FirstnameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowAbortedPayload_FirstnameValidationError) ErrorName() string {
	return "IDnowAbortedPayload_FirstnameValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowAbortedPayload_FirstnameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowAbortedPayload_Firstname.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowAbortedPayload_FirstnameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowAbortedPayload_FirstnameValidationError{}

// Validate checks the field values on IDnowAbortedPayload_Address with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowAbortedPayload_Address) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowAbortedPayload_Address with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowAbortedPayload_AddressMultiError, or nil if none found.
func (m *IDnowAbortedPayload_Address) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowAbortedPayload_Address) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IDnowAbortedPayload_AddressMultiError(errors)
	}

	return nil
}

// IDnowAbortedPayload_AddressMultiError is an error wrapping multiple
// validation errors returned by IDnowAbortedPayload_Address.ValidateAll() if
// the designated constraints aren't met.
type IDnowAbortedPayload_AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowAbortedPayload_AddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowAbortedPayload_AddressMultiError) AllErrors() []error { return m }

// IDnowAbortedPayload_AddressValidationError is the validation error returned
// by IDnowAbortedPayload_Address.Validate if the designated constraints
// aren't met.
type IDnowAbortedPayload_AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowAbortedPayload_AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowAbortedPayload_AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowAbortedPayload_AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowAbortedPayload_AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowAbortedPayload_AddressValidationError) ErrorName() string {
	return "IDnowAbortedPayload_AddressValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowAbortedPayload_AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowAbortedPayload_Address.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowAbortedPayload_AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowAbortedPayload_AddressValidationError{}

// Validate checks the field values on IDnowAbortedPayload_Birthplace with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowAbortedPayload_Birthplace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowAbortedPayload_Birthplace with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowAbortedPayload_BirthplaceMultiError, or nil if none found.
func (m *IDnowAbortedPayload_Birthplace) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowAbortedPayload_Birthplace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowAbortedPayload_BirthplaceMultiError(errors)
	}

	return nil
}

// IDnowAbortedPayload_BirthplaceMultiError is an error wrapping multiple
// validation errors returned by IDnowAbortedPayload_Birthplace.ValidateAll()
// if the designated constraints aren't met.
type IDnowAbortedPayload_BirthplaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowAbortedPayload_BirthplaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowAbortedPayload_BirthplaceMultiError) AllErrors() []error { return m }

// IDnowAbortedPayload_BirthplaceValidationError is the validation error
// returned by IDnowAbortedPayload_Birthplace.Validate if the designated
// constraints aren't met.
type IDnowAbortedPayload_BirthplaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowAbortedPayload_BirthplaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowAbortedPayload_BirthplaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowAbortedPayload_BirthplaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowAbortedPayload_BirthplaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowAbortedPayload_BirthplaceValidationError) ErrorName() string {
	return "IDnowAbortedPayload_BirthplaceValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowAbortedPayload_BirthplaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowAbortedPayload_Birthplace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowAbortedPayload_BirthplaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowAbortedPayload_BirthplaceValidationError{}

// Validate checks the field values on IDnowAbortedPayload_Birthname with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowAbortedPayload_Birthname) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowAbortedPayload_Birthname with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowAbortedPayload_BirthnameMultiError, or nil if none found.
func (m *IDnowAbortedPayload_Birthname) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowAbortedPayload_Birthname) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowAbortedPayload_BirthnameMultiError(errors)
	}

	return nil
}

// IDnowAbortedPayload_BirthnameMultiError is an error wrapping multiple
// validation errors returned by IDnowAbortedPayload_Birthname.ValidateAll()
// if the designated constraints aren't met.
type IDnowAbortedPayload_BirthnameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowAbortedPayload_BirthnameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowAbortedPayload_BirthnameMultiError) AllErrors() []error { return m }

// IDnowAbortedPayload_BirthnameValidationError is the validation error
// returned by IDnowAbortedPayload_Birthname.Validate if the designated
// constraints aren't met.
type IDnowAbortedPayload_BirthnameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowAbortedPayload_BirthnameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowAbortedPayload_BirthnameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowAbortedPayload_BirthnameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowAbortedPayload_BirthnameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowAbortedPayload_BirthnameValidationError) ErrorName() string {
	return "IDnowAbortedPayload_BirthnameValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowAbortedPayload_BirthnameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowAbortedPayload_Birthname.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowAbortedPayload_BirthnameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowAbortedPayload_BirthnameValidationError{}

// Validate checks the field values on IDnowAbortedPayload_Userdata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowAbortedPayload_Userdata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowAbortedPayload_Userdata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowAbortedPayload_UserdataMultiError, or nil if none found.
func (m *IDnowAbortedPayload_Userdata) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowAbortedPayload_Userdata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFirstname()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayload_UserdataValidationError{
					field:  "Firstname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayload_UserdataValidationError{
					field:  "Firstname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFirstname()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayload_UserdataValidationError{
				field:  "Firstname",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayload_UserdataValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayload_UserdataValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayload_UserdataValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBirthplace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayload_UserdataValidationError{
					field:  "Birthplace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayload_UserdataValidationError{
					field:  "Birthplace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBirthplace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayload_UserdataValidationError{
				field:  "Birthplace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBirthname()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayload_UserdataValidationError{
					field:  "Birthname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayload_UserdataValidationError{
					field:  "Birthname",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBirthname()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayload_UserdataValidationError{
				field:  "Birthname",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowAbortedPayload_UserdataMultiError(errors)
	}

	return nil
}

// IDnowAbortedPayload_UserdataMultiError is an error wrapping multiple
// validation errors returned by IDnowAbortedPayload_Userdata.ValidateAll() if
// the designated constraints aren't met.
type IDnowAbortedPayload_UserdataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowAbortedPayload_UserdataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowAbortedPayload_UserdataMultiError) AllErrors() []error { return m }

// IDnowAbortedPayload_UserdataValidationError is the validation error returned
// by IDnowAbortedPayload_Userdata.Validate if the designated constraints
// aren't met.
type IDnowAbortedPayload_UserdataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowAbortedPayload_UserdataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowAbortedPayload_UserdataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowAbortedPayload_UserdataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowAbortedPayload_UserdataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowAbortedPayload_UserdataValidationError) ErrorName() string {
	return "IDnowAbortedPayload_UserdataValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowAbortedPayload_UserdataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowAbortedPayload_Userdata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowAbortedPayload_UserdataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowAbortedPayload_UserdataValidationError{}

// Validate checks the field values on IDnowAbortedPayload_Country with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowAbortedPayload_Country) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowAbortedPayload_Country with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowAbortedPayload_CountryMultiError, or nil if none found.
func (m *IDnowAbortedPayload_Country) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowAbortedPayload_Country) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowAbortedPayload_CountryMultiError(errors)
	}

	return nil
}

// IDnowAbortedPayload_CountryMultiError is an error wrapping multiple
// validation errors returned by IDnowAbortedPayload_Country.ValidateAll() if
// the designated constraints aren't met.
type IDnowAbortedPayload_CountryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowAbortedPayload_CountryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowAbortedPayload_CountryMultiError) AllErrors() []error { return m }

// IDnowAbortedPayload_CountryValidationError is the validation error returned
// by IDnowAbortedPayload_Country.Validate if the designated constraints
// aren't met.
type IDnowAbortedPayload_CountryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowAbortedPayload_CountryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowAbortedPayload_CountryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowAbortedPayload_CountryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowAbortedPayload_CountryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowAbortedPayload_CountryValidationError) ErrorName() string {
	return "IDnowAbortedPayload_CountryValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowAbortedPayload_CountryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowAbortedPayload_Country.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowAbortedPayload_CountryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowAbortedPayload_CountryValidationError{}

// Validate checks the field values on IDnowAbortedPayload_Issuedby with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowAbortedPayload_Issuedby) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowAbortedPayload_Issuedby with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowAbortedPayload_IssuedbyMultiError, or nil if none found.
func (m *IDnowAbortedPayload_Issuedby) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowAbortedPayload_Issuedby) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowAbortedPayload_IssuedbyMultiError(errors)
	}

	return nil
}

// IDnowAbortedPayload_IssuedbyMultiError is an error wrapping multiple
// validation errors returned by IDnowAbortedPayload_Issuedby.ValidateAll() if
// the designated constraints aren't met.
type IDnowAbortedPayload_IssuedbyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowAbortedPayload_IssuedbyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowAbortedPayload_IssuedbyMultiError) AllErrors() []error { return m }

// IDnowAbortedPayload_IssuedbyValidationError is the validation error returned
// by IDnowAbortedPayload_Issuedby.Validate if the designated constraints
// aren't met.
type IDnowAbortedPayload_IssuedbyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowAbortedPayload_IssuedbyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowAbortedPayload_IssuedbyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowAbortedPayload_IssuedbyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowAbortedPayload_IssuedbyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowAbortedPayload_IssuedbyValidationError) ErrorName() string {
	return "IDnowAbortedPayload_IssuedbyValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowAbortedPayload_IssuedbyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowAbortedPayload_Issuedby.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowAbortedPayload_IssuedbyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowAbortedPayload_IssuedbyValidationError{}

// Validate checks the field values on IDnowAbortedPayload_Type with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowAbortedPayload_Type) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowAbortedPayload_Type with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowAbortedPayload_TypeMultiError, or nil if none found.
func (m *IDnowAbortedPayload_Type) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowAbortedPayload_Type) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Value

	if len(errors) > 0 {
		return IDnowAbortedPayload_TypeMultiError(errors)
	}

	return nil
}

// IDnowAbortedPayload_TypeMultiError is an error wrapping multiple validation
// errors returned by IDnowAbortedPayload_Type.ValidateAll() if the designated
// constraints aren't met.
type IDnowAbortedPayload_TypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowAbortedPayload_TypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowAbortedPayload_TypeMultiError) AllErrors() []error { return m }

// IDnowAbortedPayload_TypeValidationError is the validation error returned by
// IDnowAbortedPayload_Type.Validate if the designated constraints aren't met.
type IDnowAbortedPayload_TypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowAbortedPayload_TypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowAbortedPayload_TypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowAbortedPayload_TypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowAbortedPayload_TypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowAbortedPayload_TypeValidationError) ErrorName() string {
	return "IDnowAbortedPayload_TypeValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowAbortedPayload_TypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowAbortedPayload_Type.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowAbortedPayload_TypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowAbortedPayload_TypeValidationError{}

// Validate checks the field values on
// IDnowAbortedPayload_Identificationdocument with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDnowAbortedPayload_Identificationdocument) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IDnowAbortedPayload_Identificationdocument with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IDnowAbortedPayload_IdentificationdocumentMultiError, or nil if none found.
func (m *IDnowAbortedPayload_Identificationdocument) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowAbortedPayload_Identificationdocument) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCountry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayload_IdentificationdocumentValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayload_IdentificationdocumentValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCountry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayload_IdentificationdocumentValidationError{
				field:  "Country",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIssuedby()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayload_IdentificationdocumentValidationError{
					field:  "Issuedby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayload_IdentificationdocumentValidationError{
					field:  "Issuedby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssuedby()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayload_IdentificationdocumentValidationError{
				field:  "Issuedby",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayload_IdentificationdocumentValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayload_IdentificationdocumentValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayload_IdentificationdocumentValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowAbortedPayload_IdentificationdocumentMultiError(errors)
	}

	return nil
}

// IDnowAbortedPayload_IdentificationdocumentMultiError is an error wrapping
// multiple validation errors returned by
// IDnowAbortedPayload_Identificationdocument.ValidateAll() if the designated
// constraints aren't met.
type IDnowAbortedPayload_IdentificationdocumentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowAbortedPayload_IdentificationdocumentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowAbortedPayload_IdentificationdocumentMultiError) AllErrors() []error { return m }

// IDnowAbortedPayload_IdentificationdocumentValidationError is the validation
// error returned by IDnowAbortedPayload_Identificationdocument.Validate if
// the designated constraints aren't met.
type IDnowAbortedPayload_IdentificationdocumentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowAbortedPayload_IdentificationdocumentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowAbortedPayload_IdentificationdocumentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowAbortedPayload_IdentificationdocumentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowAbortedPayload_IdentificationdocumentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowAbortedPayload_IdentificationdocumentValidationError) ErrorName() string {
	return "IDnowAbortedPayload_IdentificationdocumentValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowAbortedPayload_IdentificationdocumentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowAbortedPayload_Identificationdocument.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowAbortedPayload_IdentificationdocumentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowAbortedPayload_IdentificationdocumentValidationError{}

// Validate checks the field values on IDnowAbortedPayload_Attachments with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowAbortedPayload_Attachments) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowAbortedPayload_Attachments with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowAbortedPayload_AttachmentsMultiError, or nil if none found.
func (m *IDnowAbortedPayload_Attachments) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowAbortedPayload_Attachments) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pdf

	// no validation rules for Xml

	if len(errors) > 0 {
		return IDnowAbortedPayload_AttachmentsMultiError(errors)
	}

	return nil
}

// IDnowAbortedPayload_AttachmentsMultiError is an error wrapping multiple
// validation errors returned by IDnowAbortedPayload_Attachments.ValidateAll()
// if the designated constraints aren't met.
type IDnowAbortedPayload_AttachmentsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowAbortedPayload_AttachmentsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowAbortedPayload_AttachmentsMultiError) AllErrors() []error { return m }

// IDnowAbortedPayload_AttachmentsValidationError is the validation error
// returned by IDnowAbortedPayload_Attachments.Validate if the designated
// constraints aren't met.
type IDnowAbortedPayload_AttachmentsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowAbortedPayload_AttachmentsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowAbortedPayload_AttachmentsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowAbortedPayload_AttachmentsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowAbortedPayload_AttachmentsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowAbortedPayload_AttachmentsValidationError) ErrorName() string {
	return "IDnowAbortedPayload_AttachmentsValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowAbortedPayload_AttachmentsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowAbortedPayload_Attachments.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowAbortedPayload_AttachmentsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowAbortedPayload_AttachmentsValidationError{}
