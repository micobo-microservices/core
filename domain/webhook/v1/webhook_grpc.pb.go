// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: webhook/v1/webhook.proto

package webhookv1

import (
	context "context"
	v1 "github.com/micobo/core/domain/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebhookServiceClient is the client API for WebhookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebhookServiceClient interface {
	IDnowSuccess(ctx context.Context, in *IDnowSuccessRequest, opts ...grpc.CallOption) (*v1.BoolResponse, error)
	IDnowReviewPending(ctx context.Context, in *IDnowReviewPendingRequest, opts ...grpc.CallOption) (*v1.BoolResponse, error)
	IDnowFraudSuspicionPending(ctx context.Context, in *IDnowFraudSuspicionPendingRequest, opts ...grpc.CallOption) (*v1.BoolResponse, error)
	IDnowSuccessDataChanged(ctx context.Context, in *IDnowSuccessDataChangedRequest, opts ...grpc.CallOption) (*v1.BoolResponse, error)
	IDnowFraudSuspicionConfirmed(ctx context.Context, in *IDnowFraudSuspicionConfirmedRequest, opts ...grpc.CallOption) (*v1.BoolResponse, error)
	IDnowCanceled(ctx context.Context, in *IDnowCanceledRequest, opts ...grpc.CallOption) (*v1.BoolResponse, error)
	IDnowAborted(ctx context.Context, in *IDnowAbortedRequest, opts ...grpc.CallOption) (*v1.BoolResponse, error)
}

type webhookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebhookServiceClient(cc grpc.ClientConnInterface) WebhookServiceClient {
	return &webhookServiceClient{cc}
}

func (c *webhookServiceClient) IDnowSuccess(ctx context.Context, in *IDnowSuccessRequest, opts ...grpc.CallOption) (*v1.BoolResponse, error) {
	out := new(v1.BoolResponse)
	err := c.cc.Invoke(ctx, "/webhook.v1.WebhookService/IDnowSuccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) IDnowReviewPending(ctx context.Context, in *IDnowReviewPendingRequest, opts ...grpc.CallOption) (*v1.BoolResponse, error) {
	out := new(v1.BoolResponse)
	err := c.cc.Invoke(ctx, "/webhook.v1.WebhookService/IDnowReviewPending", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) IDnowFraudSuspicionPending(ctx context.Context, in *IDnowFraudSuspicionPendingRequest, opts ...grpc.CallOption) (*v1.BoolResponse, error) {
	out := new(v1.BoolResponse)
	err := c.cc.Invoke(ctx, "/webhook.v1.WebhookService/IDnowFraudSuspicionPending", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) IDnowSuccessDataChanged(ctx context.Context, in *IDnowSuccessDataChangedRequest, opts ...grpc.CallOption) (*v1.BoolResponse, error) {
	out := new(v1.BoolResponse)
	err := c.cc.Invoke(ctx, "/webhook.v1.WebhookService/IDnowSuccessDataChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) IDnowFraudSuspicionConfirmed(ctx context.Context, in *IDnowFraudSuspicionConfirmedRequest, opts ...grpc.CallOption) (*v1.BoolResponse, error) {
	out := new(v1.BoolResponse)
	err := c.cc.Invoke(ctx, "/webhook.v1.WebhookService/IDnowFraudSuspicionConfirmed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) IDnowCanceled(ctx context.Context, in *IDnowCanceledRequest, opts ...grpc.CallOption) (*v1.BoolResponse, error) {
	out := new(v1.BoolResponse)
	err := c.cc.Invoke(ctx, "/webhook.v1.WebhookService/IDnowCanceled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) IDnowAborted(ctx context.Context, in *IDnowAbortedRequest, opts ...grpc.CallOption) (*v1.BoolResponse, error) {
	out := new(v1.BoolResponse)
	err := c.cc.Invoke(ctx, "/webhook.v1.WebhookService/IDnowAborted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebhookServiceServer is the server API for WebhookService service.
// All implementations must embed UnimplementedWebhookServiceServer
// for forward compatibility
type WebhookServiceServer interface {
	IDnowSuccess(context.Context, *IDnowSuccessRequest) (*v1.BoolResponse, error)
	IDnowReviewPending(context.Context, *IDnowReviewPendingRequest) (*v1.BoolResponse, error)
	IDnowFraudSuspicionPending(context.Context, *IDnowFraudSuspicionPendingRequest) (*v1.BoolResponse, error)
	IDnowSuccessDataChanged(context.Context, *IDnowSuccessDataChangedRequest) (*v1.BoolResponse, error)
	IDnowFraudSuspicionConfirmed(context.Context, *IDnowFraudSuspicionConfirmedRequest) (*v1.BoolResponse, error)
	IDnowCanceled(context.Context, *IDnowCanceledRequest) (*v1.BoolResponse, error)
	IDnowAborted(context.Context, *IDnowAbortedRequest) (*v1.BoolResponse, error)
	mustEmbedUnimplementedWebhookServiceServer()
}

// UnimplementedWebhookServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebhookServiceServer struct {
}

func (UnimplementedWebhookServiceServer) IDnowSuccess(context.Context, *IDnowSuccessRequest) (*v1.BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IDnowSuccess not implemented")
}
func (UnimplementedWebhookServiceServer) IDnowReviewPending(context.Context, *IDnowReviewPendingRequest) (*v1.BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IDnowReviewPending not implemented")
}
func (UnimplementedWebhookServiceServer) IDnowFraudSuspicionPending(context.Context, *IDnowFraudSuspicionPendingRequest) (*v1.BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IDnowFraudSuspicionPending not implemented")
}
func (UnimplementedWebhookServiceServer) IDnowSuccessDataChanged(context.Context, *IDnowSuccessDataChangedRequest) (*v1.BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IDnowSuccessDataChanged not implemented")
}
func (UnimplementedWebhookServiceServer) IDnowFraudSuspicionConfirmed(context.Context, *IDnowFraudSuspicionConfirmedRequest) (*v1.BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IDnowFraudSuspicionConfirmed not implemented")
}
func (UnimplementedWebhookServiceServer) IDnowCanceled(context.Context, *IDnowCanceledRequest) (*v1.BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IDnowCanceled not implemented")
}
func (UnimplementedWebhookServiceServer) IDnowAborted(context.Context, *IDnowAbortedRequest) (*v1.BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IDnowAborted not implemented")
}
func (UnimplementedWebhookServiceServer) mustEmbedUnimplementedWebhookServiceServer() {}

// UnsafeWebhookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebhookServiceServer will
// result in compilation errors.
type UnsafeWebhookServiceServer interface {
	mustEmbedUnimplementedWebhookServiceServer()
}

func RegisterWebhookServiceServer(s grpc.ServiceRegistrar, srv WebhookServiceServer) {
	s.RegisterService(&WebhookService_ServiceDesc, srv)
}

func _WebhookService_IDnowSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDnowSuccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).IDnowSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webhook.v1.WebhookService/IDnowSuccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).IDnowSuccess(ctx, req.(*IDnowSuccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_IDnowReviewPending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDnowReviewPendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).IDnowReviewPending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webhook.v1.WebhookService/IDnowReviewPending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).IDnowReviewPending(ctx, req.(*IDnowReviewPendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_IDnowFraudSuspicionPending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDnowFraudSuspicionPendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).IDnowFraudSuspicionPending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webhook.v1.WebhookService/IDnowFraudSuspicionPending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).IDnowFraudSuspicionPending(ctx, req.(*IDnowFraudSuspicionPendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_IDnowSuccessDataChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDnowSuccessDataChangedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).IDnowSuccessDataChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webhook.v1.WebhookService/IDnowSuccessDataChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).IDnowSuccessDataChanged(ctx, req.(*IDnowSuccessDataChangedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_IDnowFraudSuspicionConfirmed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDnowFraudSuspicionConfirmedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).IDnowFraudSuspicionConfirmed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webhook.v1.WebhookService/IDnowFraudSuspicionConfirmed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).IDnowFraudSuspicionConfirmed(ctx, req.(*IDnowFraudSuspicionConfirmedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_IDnowCanceled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDnowCanceledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).IDnowCanceled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webhook.v1.WebhookService/IDnowCanceled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).IDnowCanceled(ctx, req.(*IDnowCanceledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_IDnowAborted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDnowAbortedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).IDnowAborted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webhook.v1.WebhookService/IDnowAborted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).IDnowAborted(ctx, req.(*IDnowAbortedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebhookService_ServiceDesc is the grpc.ServiceDesc for WebhookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebhookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webhook.v1.WebhookService",
	HandlerType: (*WebhookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IDnowSuccess",
			Handler:    _WebhookService_IDnowSuccess_Handler,
		},
		{
			MethodName: "IDnowReviewPending",
			Handler:    _WebhookService_IDnowReviewPending_Handler,
		},
		{
			MethodName: "IDnowFraudSuspicionPending",
			Handler:    _WebhookService_IDnowFraudSuspicionPending_Handler,
		},
		{
			MethodName: "IDnowSuccessDataChanged",
			Handler:    _WebhookService_IDnowSuccessDataChanged_Handler,
		},
		{
			MethodName: "IDnowFraudSuspicionConfirmed",
			Handler:    _WebhookService_IDnowFraudSuspicionConfirmed_Handler,
		},
		{
			MethodName: "IDnowCanceled",
			Handler:    _WebhookService_IDnowCanceled_Handler,
		},
		{
			MethodName: "IDnowAborted",
			Handler:    _WebhookService_IDnowAborted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webhook/v1/webhook.proto",
}
