// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: webhook/v1/webhook.proto

package webhookv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IDnowAbortedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowAbortedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowAbortedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowAbortedRequestMultiError, or nil if none found.
func (m *IDnowAbortedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowAbortedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantName

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowAbortedRequestMultiError(errors)
	}

	return nil
}

// IDnowAbortedRequestMultiError is an error wrapping multiple validation
// errors returned by IDnowAbortedRequest.ValidateAll() if the designated
// constraints aren't met.
type IDnowAbortedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowAbortedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowAbortedRequestMultiError) AllErrors() []error { return m }

// IDnowAbortedRequestValidationError is the validation error returned by
// IDnowAbortedRequest.Validate if the designated constraints aren't met.
type IDnowAbortedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowAbortedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowAbortedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowAbortedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowAbortedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowAbortedRequestValidationError) ErrorName() string {
	return "IDnowAbortedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowAbortedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowAbortedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowAbortedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowAbortedRequestValidationError{}

// Validate checks the field values on IDnowCanceledRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowCanceledRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowCanceledRequestMultiError, or nil if none found.
func (m *IDnowCanceledRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantName

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowCanceledRequestMultiError(errors)
	}

	return nil
}

// IDnowCanceledRequestMultiError is an error wrapping multiple validation
// errors returned by IDnowCanceledRequest.ValidateAll() if the designated
// constraints aren't met.
type IDnowCanceledRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledRequestMultiError) AllErrors() []error { return m }

// IDnowCanceledRequestValidationError is the validation error returned by
// IDnowCanceledRequest.Validate if the designated constraints aren't met.
type IDnowCanceledRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledRequestValidationError) ErrorName() string {
	return "IDnowCanceledRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledRequestValidationError{}

// Validate checks the field values on IDnowFraudSuspicionConfirmedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowFraudSuspicionConfirmedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowFraudSuspicionConfirmedRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedRequestMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantName

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedRequestMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedRequestMultiError is an error wrapping multiple
// validation errors returned by
// IDnowFraudSuspicionConfirmedRequest.ValidateAll() if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedRequestMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedRequestValidationError is the validation error
// returned by IDnowFraudSuspicionConfirmedRequest.Validate if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedRequestValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedRequestValidationError{}

// Validate checks the field values on IDnowSuccessDataChangedRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessDataChangedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessDataChangedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowSuccessDataChangedRequestMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantName

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowSuccessDataChangedRequestMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedRequestMultiError is an error wrapping multiple
// validation errors returned by IDnowSuccessDataChangedRequest.ValidateAll()
// if the designated constraints aren't met.
type IDnowSuccessDataChangedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedRequestMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedRequestValidationError is the validation error
// returned by IDnowSuccessDataChangedRequest.Validate if the designated
// constraints aren't met.
type IDnowSuccessDataChangedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedRequestValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedRequestValidationError{}

// Validate checks the field values on IDnowFraudSuspicionPendingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowFraudSuspicionPendingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowFraudSuspicionPendingRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowFraudSuspicionPendingRequestMultiError, or nil if none found.
func (m *IDnowFraudSuspicionPendingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionPendingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantName

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionPendingRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowFraudSuspicionPendingRequestMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionPendingRequestMultiError is an error wrapping multiple
// validation errors returned by
// IDnowFraudSuspicionPendingRequest.ValidateAll() if the designated
// constraints aren't met.
type IDnowFraudSuspicionPendingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionPendingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionPendingRequestMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionPendingRequestValidationError is the validation error
// returned by IDnowFraudSuspicionPendingRequest.Validate if the designated
// constraints aren't met.
type IDnowFraudSuspicionPendingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionPendingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionPendingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionPendingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionPendingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionPendingRequestValidationError) ErrorName() string {
	return "IDnowFraudSuspicionPendingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionPendingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionPendingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionPendingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionPendingRequestValidationError{}

// Validate checks the field values on IDnowReviewPendingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowReviewPendingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingRequestMultiError, or nil if none found.
func (m *IDnowReviewPendingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantName

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowReviewPendingRequestMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingRequestMultiError is an error wrapping multiple validation
// errors returned by IDnowReviewPendingRequest.ValidateAll() if the
// designated constraints aren't met.
type IDnowReviewPendingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingRequestMultiError) AllErrors() []error { return m }

// IDnowReviewPendingRequestValidationError is the validation error returned by
// IDnowReviewPendingRequest.Validate if the designated constraints aren't met.
type IDnowReviewPendingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingRequestValidationError) ErrorName() string {
	return "IDnowReviewPendingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingRequestValidationError{}

// Validate checks the field values on IDnowSuccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowSuccessRequestMultiError, or nil if none found.
func (m *IDnowSuccessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantName

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowSuccessRequestMultiError(errors)
	}

	return nil
}

// IDnowSuccessRequestMultiError is an error wrapping multiple validation
// errors returned by IDnowSuccessRequest.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessRequestMultiError) AllErrors() []error { return m }

// IDnowSuccessRequestValidationError is the validation error returned by
// IDnowSuccessRequest.Validate if the designated constraints aren't met.
type IDnowSuccessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessRequestValidationError) ErrorName() string {
	return "IDnowSuccessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessRequestValidationError{}
