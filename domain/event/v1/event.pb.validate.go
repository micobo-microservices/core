// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: event/v1/event.proto

package eventv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IDnowSuccessPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowSuccessPayloadMultiError, or nil if none found.
func (m *IDnowSuccessPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantName

	if all {
		switch v := interface{}(m.GetPayload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessPayloadValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessPayloadValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessPayloadValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowSuccessPayloadMultiError(errors)
	}

	return nil
}

// IDnowSuccessPayloadMultiError is an error wrapping multiple validation
// errors returned by IDnowSuccessPayload.ValidateAll() if the designated
// constraints aren't met.
type IDnowSuccessPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessPayloadMultiError) AllErrors() []error { return m }

// IDnowSuccessPayloadValidationError is the validation error returned by
// IDnowSuccessPayload.Validate if the designated constraints aren't met.
type IDnowSuccessPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessPayloadValidationError) ErrorName() string {
	return "IDnowSuccessPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessPayloadValidationError{}

// Validate checks the field values on IDnowReviewPendingPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowReviewPendingPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowReviewPendingPayload with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowReviewPendingPayloadMultiError, or nil if none found.
func (m *IDnowReviewPendingPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowReviewPendingPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantName

	if all {
		switch v := interface{}(m.GetPayload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowReviewPendingPayloadValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowReviewPendingPayloadValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowReviewPendingPayloadValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowReviewPendingPayloadMultiError(errors)
	}

	return nil
}

// IDnowReviewPendingPayloadMultiError is an error wrapping multiple validation
// errors returned by IDnowReviewPendingPayload.ValidateAll() if the
// designated constraints aren't met.
type IDnowReviewPendingPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowReviewPendingPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowReviewPendingPayloadMultiError) AllErrors() []error { return m }

// IDnowReviewPendingPayloadValidationError is the validation error returned by
// IDnowReviewPendingPayload.Validate if the designated constraints aren't met.
type IDnowReviewPendingPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowReviewPendingPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowReviewPendingPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowReviewPendingPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowReviewPendingPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowReviewPendingPayloadValidationError) ErrorName() string {
	return "IDnowReviewPendingPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowReviewPendingPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowReviewPendingPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowReviewPendingPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowReviewPendingPayloadValidationError{}

// Validate checks the field values on IDnowFraudSuspicionPendingPayload with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowFraudSuspicionPendingPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowFraudSuspicionPendingPayload
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowFraudSuspicionPendingPayloadMultiError, or nil if none found.
func (m *IDnowFraudSuspicionPendingPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionPendingPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantName

	if all {
		switch v := interface{}(m.GetPayload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayloadValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionPendingPayloadValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionPendingPayloadValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowFraudSuspicionPendingPayloadMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionPendingPayloadMultiError is an error wrapping multiple
// validation errors returned by
// IDnowFraudSuspicionPendingPayload.ValidateAll() if the designated
// constraints aren't met.
type IDnowFraudSuspicionPendingPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionPendingPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionPendingPayloadMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionPendingPayloadValidationError is the validation error
// returned by IDnowFraudSuspicionPendingPayload.Validate if the designated
// constraints aren't met.
type IDnowFraudSuspicionPendingPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionPendingPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionPendingPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionPendingPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionPendingPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionPendingPayloadValidationError) ErrorName() string {
	return "IDnowFraudSuspicionPendingPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionPendingPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionPendingPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionPendingPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionPendingPayloadValidationError{}

// Validate checks the field values on IDnowSuccessDataChangedPayload with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowSuccessDataChangedPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowSuccessDataChangedPayload with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IDnowSuccessDataChangedPayloadMultiError, or nil if none found.
func (m *IDnowSuccessDataChangedPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowSuccessDataChangedPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantName

	if all {
		switch v := interface{}(m.GetPayload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayloadValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowSuccessDataChangedPayloadValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowSuccessDataChangedPayloadValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowSuccessDataChangedPayloadMultiError(errors)
	}

	return nil
}

// IDnowSuccessDataChangedPayloadMultiError is an error wrapping multiple
// validation errors returned by IDnowSuccessDataChangedPayload.ValidateAll()
// if the designated constraints aren't met.
type IDnowSuccessDataChangedPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowSuccessDataChangedPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowSuccessDataChangedPayloadMultiError) AllErrors() []error { return m }

// IDnowSuccessDataChangedPayloadValidationError is the validation error
// returned by IDnowSuccessDataChangedPayload.Validate if the designated
// constraints aren't met.
type IDnowSuccessDataChangedPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowSuccessDataChangedPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowSuccessDataChangedPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowSuccessDataChangedPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowSuccessDataChangedPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowSuccessDataChangedPayloadValidationError) ErrorName() string {
	return "IDnowSuccessDataChangedPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowSuccessDataChangedPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowSuccessDataChangedPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowSuccessDataChangedPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowSuccessDataChangedPayloadValidationError{}

// Validate checks the field values on IDnowFraudSuspicionConfirmedPayload with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IDnowFraudSuspicionConfirmedPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowFraudSuspicionConfirmedPayload
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IDnowFraudSuspicionConfirmedPayloadMultiError, or nil if none found.
func (m *IDnowFraudSuspicionConfirmedPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowFraudSuspicionConfirmedPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantName

	if all {
		switch v := interface{}(m.GetPayload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayloadValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowFraudSuspicionConfirmedPayloadValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowFraudSuspicionConfirmedPayloadValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowFraudSuspicionConfirmedPayloadMultiError(errors)
	}

	return nil
}

// IDnowFraudSuspicionConfirmedPayloadMultiError is an error wrapping multiple
// validation errors returned by
// IDnowFraudSuspicionConfirmedPayload.ValidateAll() if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowFraudSuspicionConfirmedPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowFraudSuspicionConfirmedPayloadMultiError) AllErrors() []error { return m }

// IDnowFraudSuspicionConfirmedPayloadValidationError is the validation error
// returned by IDnowFraudSuspicionConfirmedPayload.Validate if the designated
// constraints aren't met.
type IDnowFraudSuspicionConfirmedPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowFraudSuspicionConfirmedPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowFraudSuspicionConfirmedPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowFraudSuspicionConfirmedPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowFraudSuspicionConfirmedPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowFraudSuspicionConfirmedPayloadValidationError) ErrorName() string {
	return "IDnowFraudSuspicionConfirmedPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowFraudSuspicionConfirmedPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowFraudSuspicionConfirmedPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowFraudSuspicionConfirmedPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowFraudSuspicionConfirmedPayloadValidationError{}

// Validate checks the field values on IDnowCanceledPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowCanceledPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowCanceledPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowCanceledPayloadMultiError, or nil if none found.
func (m *IDnowCanceledPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowCanceledPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantName

	if all {
		switch v := interface{}(m.GetPayload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowCanceledPayloadValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowCanceledPayloadValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowCanceledPayloadValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowCanceledPayloadMultiError(errors)
	}

	return nil
}

// IDnowCanceledPayloadMultiError is an error wrapping multiple validation
// errors returned by IDnowCanceledPayload.ValidateAll() if the designated
// constraints aren't met.
type IDnowCanceledPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowCanceledPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowCanceledPayloadMultiError) AllErrors() []error { return m }

// IDnowCanceledPayloadValidationError is the validation error returned by
// IDnowCanceledPayload.Validate if the designated constraints aren't met.
type IDnowCanceledPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowCanceledPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowCanceledPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowCanceledPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowCanceledPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowCanceledPayloadValidationError) ErrorName() string {
	return "IDnowCanceledPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowCanceledPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowCanceledPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowCanceledPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowCanceledPayloadValidationError{}

// Validate checks the field values on IDnowAbortedPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IDnowAbortedPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDnowAbortedPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IDnowAbortedPayloadMultiError, or nil if none found.
func (m *IDnowAbortedPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *IDnowAbortedPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantName

	if all {
		switch v := interface{}(m.GetPayload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDnowAbortedPayloadValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDnowAbortedPayloadValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDnowAbortedPayloadValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDnowAbortedPayloadMultiError(errors)
	}

	return nil
}

// IDnowAbortedPayloadMultiError is an error wrapping multiple validation
// errors returned by IDnowAbortedPayload.ValidateAll() if the designated
// constraints aren't met.
type IDnowAbortedPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDnowAbortedPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDnowAbortedPayloadMultiError) AllErrors() []error { return m }

// IDnowAbortedPayloadValidationError is the validation error returned by
// IDnowAbortedPayload.Validate if the designated constraints aren't met.
type IDnowAbortedPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDnowAbortedPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDnowAbortedPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDnowAbortedPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDnowAbortedPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDnowAbortedPayloadValidationError) ErrorName() string {
	return "IDnowAbortedPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e IDnowAbortedPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDnowAbortedPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDnowAbortedPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDnowAbortedPayloadValidationError{}
