// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: token/v1/token.proto

package tokenv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionRequestMultiError, or nil if none found.
func (m *TransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for From

	// no validation rules for ContractAddress

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransactionRequestValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransactionRequestValidationError{
						field:  fmt.Sprintf("Parameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionRequestValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UseGnosis != nil {
		// no validation rules for UseGnosis
	}

	if len(errors) > 0 {
		return TransactionRequestMultiError(errors)
	}

	return nil
}

// TransactionRequestMultiError is an error wrapping multiple validation errors
// returned by TransactionRequest.ValidateAll() if the designated constraints
// aren't met.
type TransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionRequestMultiError) AllErrors() []error { return m }

// TransactionRequestValidationError is the validation error returned by
// TransactionRequest.Validate if the designated constraints aren't met.
type TransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionRequestValidationError) ErrorName() string {
	return "TransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionRequestValidationError{}

// Validate checks the field values on TxResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TxResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TxResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TxResponseMultiError, or
// nil if none found.
func (m *TxResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TxResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountNonce

	// no validation rules for GasLimit

	// no validation rules for Payload

	if m.Price != nil {
		// no validation rules for Price
	}

	if m.Recipient != nil {
		// no validation rules for Recipient
	}

	if m.Amount != nil {
		// no validation rules for Amount
	}

	if m.V != nil {
		// no validation rules for V
	}

	if m.S != nil {
		// no validation rules for S
	}

	if m.R != nil {
		// no validation rules for R
	}

	if m.Hash != nil {
		// no validation rules for Hash
	}

	if len(errors) > 0 {
		return TxResponseMultiError(errors)
	}

	return nil
}

// TxResponseMultiError is an error wrapping multiple validation errors
// returned by TxResponse.ValidateAll() if the designated constraints aren't met.
type TxResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TxResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TxResponseMultiError) AllErrors() []error { return m }

// TxResponseValidationError is the validation error returned by
// TxResponse.Validate if the designated constraints aren't met.
type TxResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TxResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TxResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TxResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TxResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TxResponseValidationError) ErrorName() string { return "TxResponseValidationError" }

// Error satisfies the builtin error interface
func (e TxResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTxResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TxResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TxResponseValidationError{}

// Validate checks the field values on ProcessTokenTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessTokenTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessTokenTransactionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProcessTokenTransactionRequestMultiError, or nil if none found.
func (m *ProcessTokenTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessTokenTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantName

	// no validation rules for Method

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessTokenTransactionRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessTokenTransactionRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessTokenTransactionRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProcessTokenTransactionRequestMultiError(errors)
	}

	return nil
}

// ProcessTokenTransactionRequestMultiError is an error wrapping multiple
// validation errors returned by ProcessTokenTransactionRequest.ValidateAll()
// if the designated constraints aren't met.
type ProcessTokenTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessTokenTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessTokenTransactionRequestMultiError) AllErrors() []error { return m }

// ProcessTokenTransactionRequestValidationError is the validation error
// returned by ProcessTokenTransactionRequest.Validate if the designated
// constraints aren't met.
type ProcessTokenTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessTokenTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessTokenTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessTokenTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessTokenTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessTokenTransactionRequestValidationError) ErrorName() string {
	return "ProcessTokenTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessTokenTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessTokenTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessTokenTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessTokenTransactionRequestValidationError{}

// Validate checks the field values on ProcessTokenTransactionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessTokenTransactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessTokenTransactionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProcessTokenTransactionResponseMultiError, or nil if none found.
func (m *ProcessTokenTransactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessTokenTransactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessTokenTransactionResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessTokenTransactionResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessTokenTransactionResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProcessTokenTransactionResponseMultiError(errors)
	}

	return nil
}

// ProcessTokenTransactionResponseMultiError is an error wrapping multiple
// validation errors returned by ProcessTokenTransactionResponse.ValidateAll()
// if the designated constraints aren't met.
type ProcessTokenTransactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessTokenTransactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessTokenTransactionResponseMultiError) AllErrors() []error { return m }

// ProcessTokenTransactionResponseValidationError is the validation error
// returned by ProcessTokenTransactionResponse.Validate if the designated
// constraints aren't met.
type ProcessTokenTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessTokenTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessTokenTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessTokenTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessTokenTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessTokenTransactionResponseValidationError) ErrorName() string {
	return "ProcessTokenTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessTokenTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessTokenTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessTokenTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessTokenTransactionResponseValidationError{}
